//
//  CheckOrder.m
//  CheckOrder
//
//  Created by yangxd on 11-02-20.
//  Updated by yangxd on 11-03-11  完善界面
//  Updated by yangxd on 11-04-19  添加下单成功后的晒单功能
//  Updated by yangxd on 11-06-14  修正输入发票内容时画面上移效果
//  Updated by yangxd on 11-07-20  添加在线支付功能
//  Copyright 2011 vsc. All rights reserved.
//

#import "CheckOrder.h"
#import "Page.h"
#import "RegexKitLite.h"
#import "GlobalValue.h"
#import "ProductVO.h"
#import "OrderVO.h"
#import "OrderItemVO.h"
#import "GoodReceiverVO.h"
#import "CouponVO.h"
#import "InvoiceVO.h"
#import "BankVO.h"
#import "OrderService.h"
#import "CartService.h"
#import "CouponService.h"
#import "GoodReceiver.h"
#import "PayService.h"
#import "MyOrder.h"
#import "OnlinePay.h"
#import <QuartzCore/QuartzCore.h>
#import "PaymentMethodVO.h"

#import "Invoice.h"
#import "AddressService.h"
#import "DataController.h"
#import "EditGoodsReceiver.h"
#import "AccountBalance.h"
#import "OTSSecurityValidationVC.h"
#import "NeedCheckResult.h"
#import "OTSNaviAnimation.h"
#import "AlertView.h"
#import "TheStoreAppAppDelegate.h"
#import "OTSAlertView.h"
#import "OTSActionSheet.h"
#import "OTSBadgeButton.h"
#import "OTSOrderSubmitOKVC.h"
#import "OTSImageView.h"
#import "DoTracking.h"
#define ALERTVIEW_TAG_CANCEL_ORDER 203		 // 取消订单提示框标识
#define ALERTVIEW_TAG_OTHERS 204             // 其他提示框标识
#define ALERTVIEW_TAG_MSG_ORDER 205          //短信验证后保存订单仍然失败
#define ALERTVIEW_TAG_MSG_GATEWAY 206        //提示抵用券不支持货到支付
#define ALERTVIEW_TAG_ORDER_DISTRIBUTION 207 //提示有商品不能被配送
#define TAG_PAYMENT_CELL_LABEL      999

#define THREAD_STATUS_SUBMIT_ORDER          302
#define THREAD_STATUS_GET_SESSIONORDER      304
#define THREAD_STATUS_CLEAR_ALLPRODUCTS     305
#define THREAD_STATUS_SAVE_PAYMENT_ONLY     309
#define THREAD_STATUS_GET_PAYMENT_METHOD    310
#define THREAD_STATUS_SUBMIT_ORDER_EX       311
#define THREAD_STATUS_GET_RECEIVERLIST      312
#define THREAD_STATUS_GET_ACCOUNT_BALANCE   314     // 获取用户账户余额
#define THREAD_STATUS_GET_ACCOUNT_COUPON    315     // 获取用户可用抵用券

#define THE_HINT_COUPON                     2000
#define GOODS_TO_PAY                        @"货到付现金"
#define GOODS_TO_CARD                       @"货到刷卡"
#define GOODS_PAY_ONLINE                    @"网上支付"

#define BALANCE_PAY_CASH    0
#define BALANCE_PAY_GIFTCARD 1

#define UIColorFromRGB(rgbValue) [UIColor \
colorWithRed:((float)((rgbValue & 0xFF0000) >> 16))/255.0 \
green:((float)((rgbValue & 0xFF00) >> 8))/255.0 \
blue:((float)(rgbValue & 0xFF))/255.0 alpha:1.0]


#define CELL_HEIGHT 15
#define OTS_EMPTY_STR       @" "
#define OTS_FOCUS_COLOR     DARK_RED_COLOR
#define OTS_NORMAL_COLOR     [UIColor blackColor]

#define DARK_RED_COLOR  [UIColor colorWithRed:204.0/255.0 green:0.0 blue:1.0/255.0 alpha:1.0]

// Table view cell type define
typedef enum _KOtsCheckOrderCellType
{
    EOtsCoCellPaymentWay = 0    // 支付方式
    , EOtsCoCellCoupOn          // 抵用券
    , EOtsCoCellBalancePay      // 余额支付
    , EOtsCoCellGiftCardPay     // 礼品卡余额支付
    , EOtsCoCellInvoice         // 发票
}KOtsCheckOrderCellType;

@interface CheckOrder ()
{
    BOOL      isExpand;     //收缩状态
}
@property (retain)  NSMutableArray  *goodItems;     // 商品 + 赠品
@property (retain)  NSMutableDictionary *packGoodItems; //分包裹的  商品 + 赠品
@property (retain)  NSMutableDictionary *packGoodisExpand; //各个包裹的 收缩状态
@property(nonatomic)int balanceStyle;   // 余额使用方式，0为现金，1为礼品卡。

-(CGFloat)heightForMoneyFristRow;
-(UITableViewCell*)decorateCell:(UITableViewCell*)aCell type:(KOtsCheckOrderCellType)aType;
-(UITableViewCell*)cellWithStyle:(UITableViewCellStyle)aCellStype;
-(void)updatePaymentLabelScrollIfFocus:(BOOL)aScrollIfFocus;
-(void)setPaymentLabel:(NSString*)aPaymentStr;
-(NSArray*)gifts;
-(NSArray*)goods;
-(NSDictionary *)packgifts; //分包赠品
-(NSDictionary *)packgoods; //分包商品
@end

@implementation CheckOrder
@synthesize isBankNull;
@synthesize m_HasAddress;//传入参数，是否有收货地址
@synthesize m_UserSelectedGiftArray;//传入参数，用户已选赠品，包含NSMutableDictionary
@synthesize m_Mycoupon;//订单上绑定的抵用券
@synthesize m_delegate, m_Invoice, m_PayMethodStr;
@synthesize goodItems = _goodItems;
@synthesize packGoodItems = _packGoodItems;
@synthesize packGoodisExpand = _packGoodisExpand;
@synthesize balanceStyle;
@synthesize distributionArray;
@synthesize distributionError;
@synthesize m_MoneyTableView;
@synthesize m_ProductTableView;

- (void)viewDidLoad
{
    [super viewDidLoad];
    
    
    self.goodItems = [NSMutableArray array];
    self.packGoodItems = [NSMutableDictionary dictionary];
    self.packGoodisExpand = [NSMutableDictionary dictionary];
    
    CGRect theRc = self.view.frame;
    theRc.origin.y = OTS_IPHONE_NAVI_BAR_HEIGHT;
    m_ScrollView.frame = theRc;
    
    if (self.isFullScreen)
    {
        [self strechViewToBottom:m_ScrollView];
    }
    JSTrackingPrama* prama = [[[JSTrackingPrama alloc]initWithJSType:EJStracking_CheckOrder extraPramaDic:nil]autorelease];
    [DoTracking doJsTrackingWithParma:prama];
    
    [self initCheckOrder];
    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(saveGoodReceiverToOrder:) name:@"SaveGoodReceiveToOrder" object:nil];
    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(saveInvoiceToOrder:) name:@"SaveInvoiceToOrder" object:nil];
    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector
     (saveCouponToOrder:) name:@"saveCouponToOrder" object:nil];
    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(updatePaymentMethodLabel:) name:@"UpdatePaymentMethod" object:nil];
    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(showCheckOrderView:) name:@"showCheckOrderView" object:nil];
    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(payMentWayChanged:) name:@"PayMentWayChanged" object:nil];
    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(removeDistributionArray:) name:@"removeDistributionArray" object:nil];
    
    
    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(gotoCartAndRefresh:) name:OTS_NOTIFY_GOTO_CART_AND_REFRESH object:nil];
    
	gatewayType=-1;
	methodID=-1;
	selectedIndex=0;
    fromTag = 0;
	m_OrderService=[[OrderService alloc]init];
    m_UseCouponMoney = 0.0;
    self.m_delegate = (MyStoreViewController *)[SharedDelegate.tabBarController.viewControllers objectAtIndex:3];
    
    m_ThreadState=THREAD_STATUS_GET_SESSIONORDER;
    [self setUpThread:YES];
}


-(void)gotoCartAndRefresh:(NSNotification *)notification
{
    [SharedDelegate enterCartWithUpdate:YES];
}

//保存收货人信息到订单
-(void)saveGoodReceiverToOrder:(NSNotification *)notification
{
//    GoodReceiverVO* grvo = (GoodReceiverVO*)notification.object;
//    m_CheckOrderVO.goodReceiver = grvo;
//    m_ThreadState = THREAD_STATUS_GET_PAYMENT_METHOD;
    m_ThreadState=THREAD_STATUS_GET_SESSIONORDER;
	[self setUpThread:YES];
}

//保存抵用券信息到订单
-(void)saveCouponToOrder:(NSNotification *)notification
{
    fromTag = THE_HINT_COUPON;
    NSString *errorInfo = (NSString*)[notification object];
    //保存订单后短信验证仍然失败
    if (errorInfo!=nil) {
        [self showAlertView:nil alertMsg:errorInfo alertTag:ALERTVIEW_TAG_MSG_ORDER];
    }
    m_ThreadState=THREAD_STATUS_GET_SESSIONORDER;
    [self setUpThread:YES];
}


//保存发票信息到订单
-(void)saveInvoiceToOrder:(NSNotification *)notification
{
	NSArray* tempArray = (NSArray*)[notification object];
	if (editInvoiceVO != nil) {
		[editInvoiceVO release];
	}
	editInvoiceVO = [[tempArray objectAtIndex:0] retain];
	titleStyle = [tempArray objectAtIndex:1];						//抬头类型 个人为0，公司为1
	
	NSNumber* isHadSave = [tempArray objectAtIndex:2];				//标帜从“返回”返回，还是从“保存”返回 0为保存，1为返回
	if (isHadSave == [NSNumber numberWithInt:0]) {
		[m_InvoiceLabel setText:editInvoiceVO.title];
		[m_Invoice setM_InvoiceTitle:editInvoiceVO.title];
		[m_Invoice setM_InvoiceContent:editInvoiceVO.content];
		[m_Invoice setM_InvoiceAmount:m_CheckOrderVO.productAmount];
		isNeedInvoice = YES;
		//将抬头保存到本地
		NSArray* paths = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES);
		NSString* directory = [paths objectAtIndex:0];
		NSString* fileName = [directory stringByAppendingPathComponent:@"InvoiceTitle.plist"];
		//[editInvoiceVO.content writeToFile:fileName atomically:NO enc];
		[editInvoiceVO.title writeToFile:fileName atomically:NO encoding:NSUTF8StringEncoding error:nil];
        
        // 需传入额外的invoiceTitle,invoiceContent,invoiceAmount
        //        NSMutableDictionary* dic = [NSMutableDictionary dictionaryWithCapacity:3];
        //        [dic setSafeObject:editInvoiceVO.title forKey:@"invoiceTitle"];
        //        [dic setSafeObject:[NSString stringWithFormat:@"%@",editInvoiceVO.content] forKey:@"invoiceContent"];
        //        [dic setSafeObject:m_CheckOrderVO.productAmount forKey:@"invoiceAmount"];
        //        JSTrackingPrama* prama = [[[JSTrackingPrama alloc]initWithJSType:EJStracking_SaveInvoice extraPramaDic:dic] autorelease];
        JSTrackingPrama* prama = [[[JSTrackingPrama alloc]initWithJSType:EJStracking_SaveInvoice extraPrama:editInvoiceVO.title, editInvoiceVO.content, m_CheckOrderVO.productAmount, nil]autorelease];
        [DoTracking doJsTrackingWithParma:prama];
	}else {
		NSNumber* isNeed = [tempArray objectAtIndex:3];
		if ([isNeed intValue] == 1) {						//不需要需要发票
			[m_InvoiceLabel setText:@"否"];
			isNeedInvoice = NO;
		}
	}
}

-(void)setPaymentLabel:(NSString*)aPaymentStr
{
    [m_PaymentWayDetailLbl setText:aPaymentStr];
    
    if (aPaymentStr && [aPaymentStr length] > 0)
    {
        UIView* view = [m_PaymentWayDetailLbl.superview viewWithTag:TAG_PAYMENT_CELL_LABEL];
        if (view && [view isKindOfClass:[UILabel class]])
        {
            ((UILabel*)view).textColor = [UIColor blackColor];
        }
    }
}

//刷新支付方式显示, 网上支付
-(void)updatePaymentMethodLabel:(NSNotification *)notification   // 从选择支付页面回来后需要更新4个值，分别是 paymentType， gatewayType，methodId, m_PayMethodStr
{
    for (PaymentMethodVO *paymentMehtod in m_PaymentMethods) // methodID 设置为网上支付对应
    {
        if ([paymentMehtod gatewayId]==nil && [[paymentMehtod methodName] isEqualToString:GOODS_PAY_ONLINE])
        {
            methodID = [paymentMehtod.methodId intValue];
        }
    }
    paymentType=1;
    BankVO *bankVO=[notification object];
    gatewayType=[bankVO.gateway intValue];
    self.m_PayMethodStr = bankVO.bankname;
    [self setPaymentLabel:m_PayMethodStr];
}


//清除无法配送商品列表
-(void)removeDistributionArray:(NSNotification *)notification{
    [self.distributionArray removeAllObjects];
}

//刷新支付方式显示, 货到支付
-(void)payMentWayChanged:(NSNotification *)notification{ // 从选择支付页面回来后需要更新4个值，分别是 paymentType， gatewayType，methodId, m_PayMethodStr
    PaymentMethodVO* tempPaymentMehtod = (PaymentMethodVO*)[notification object];
    
    self.m_PayMethodStr = [tempPaymentMehtod methodName];
    
    if ([m_PayMethodStr isEqualToString:GOODS_TO_PAY])
    {
        paymentType = 2;
    }
    else if ([m_PayMethodStr isEqualToString:GOODS_TO_CARD])
    {
        paymentType = 3;
    }
    
    methodID = [[tempPaymentMehtod methodId] intValue];
    gatewayType = [[tempPaymentMehtod gatewayId] intValue];
    [self setPaymentLabel:m_PayMethodStr];
}
//显示view
-(void)showCheckOrderView:(NSNotification *)notification
{
    [self.view setHidden:NO];
}

//显示用户账户支付金额
-(void)showAccountPayMoney:(NSNumber *)payMoney
{
    m_AccountPayMoney=[payMoney doubleValue];
    if (m_AccountPayMoney>-0.0001 && m_AccountPayMoney<0.0001) {
        double needPayMoney=[m_CheckOrderVO.productAmount doubleValue]+[m_CheckOrderVO.deliveryAmount doubleValue]-m_UseCouponMoney-[m_CheckOrderVO.cashAmount doubleValue]-m_GiftCardPayMoney;
        [m_NeedAccountPayLabel setText:@"否"];
        m_AccountPayMoney = 0.0;
        [m_AccountPayLabel setText:[NSString stringWithFormat:@"￥%.2f",m_AccountPayMoney]];
        if (needPayMoney <= 0) {
            [m_NeedPayMoneyLabel setText:@"￥0.00"];
        }else
            [m_NeedPayMoneyLabel setText:[NSString stringWithFormat:@"￥%.2f",needPayMoney]];
    } else {
        double needPayMoney=[m_CheckOrderVO.productAmount doubleValue]+[m_CheckOrderVO.deliveryAmount doubleValue]-m_AccountPayMoney-m_UseCouponMoney-[m_CheckOrderVO.cashAmount doubleValue]-m_GiftCardPayMoney;
        [m_NeedAccountPayLabel setText:[NSString stringWithFormat:@"￥%.2f",m_AccountPayMoney]];
        [m_AccountPayLabel setText:[NSString stringWithFormat:@"￥%.2f",m_AccountPayMoney]];
        if (needPayMoney <= 0) {
            [m_NeedPayMoneyLabel setText:@"￥0.00"];
        }else {
            [m_NeedPayMoneyLabel setText:[NSString stringWithFormat:@"￥%.2f",needPayMoney]];
        }
        if ([m_NeedPayMoneyLabel.text isEqualToString:@"￥0.00"]) {              //余额支付全款
            m_PaymentWayLbl.textColor = OTS_NORMAL_COLOR;
        }else if ([m_PaymentWayDetailLbl.text isEqualToString:OTS_EMPTY_STR]){  //未选择付款方式且需要支付余额
            m_PaymentWayLbl.textColor = OTS_FOCUS_COLOR;
        }
    }
}
-(void)showGiftCardPayMoney:(NSNumber *)payMoney
{
    m_GiftCardPayMoney=[payMoney doubleValue];
    if (m_GiftCardPayMoney>-0.0001 && m_GiftCardPayMoney<0.0001) {
        double needPayMoney=[m_CheckOrderVO.productAmount doubleValue]+[m_CheckOrderVO.deliveryAmount doubleValue]-m_UseCouponMoney-[m_CheckOrderVO.cashAmount doubleValue]-m_AccountPayMoney;
        [m_cardPayLabel setText:@"否"];
        m_GiftCardPayMoney = 0.0;
        [m_GiftCardPayLabel setText:[NSString stringWithFormat:@"￥%.2f",m_GiftCardPayMoney]];
        if (needPayMoney <= 0) {
            [m_NeedPayMoneyLabel setText:@"￥0.00"];
        }else
            [m_NeedPayMoneyLabel setText:[NSString stringWithFormat:@"￥%.2f",needPayMoney]];
    } else {
        double needPayMoney=[m_CheckOrderVO.productAmount doubleValue]+[m_CheckOrderVO.deliveryAmount doubleValue]-m_AccountPayMoney-m_UseCouponMoney-[m_CheckOrderVO.cashAmount doubleValue]-m_GiftCardPayMoney;
        [m_cardPayLabel setText:[NSString stringWithFormat:@"￥%.2f",m_GiftCardPayMoney]];
        [m_GiftCardPayLabel setText:[NSString stringWithFormat:@"￥%.2f",m_GiftCardPayMoney]];
        if (needPayMoney <= 0) {
            [m_NeedPayMoneyLabel setText:@"￥0.00"];
        }else {
            [m_NeedPayMoneyLabel setText:[NSString stringWithFormat:@"￥%.2f",needPayMoney]];
        }
        if ([m_NeedPayMoneyLabel.text isEqualToString:@"￥0.00"]) {              //余额支付全款
            m_PaymentWayLbl.textColor = OTS_NORMAL_COLOR;
        }else if ([m_PaymentWayDetailLbl.text isEqualToString:OTS_EMPTY_STR]){  //未选择付款方式且需要支付余额
            m_PaymentWayLbl.textColor = OTS_FOCUS_COLOR;
        }
    }
}

//显示抵用券金额
-(void)showUseCouponMoney:(id)aObj
{
    fromTag = THE_HINT_COUPON;
    m_ThreadState=THREAD_STATUS_GET_SESSIONORDER;
    [self setUpThread:YES];
}

-(UITableView*)tableViewFromTemplate
{
    UITableView* tv=[[[UITableView alloc] initWithFrame:CGRectMake(0, 0, 320, 50) style:UITableViewStyleGrouped] autorelease];
    [tv setBackgroundColor:[UIColor clearColor]];
    [tv setBackgroundView:nil];
    [tv setScrollEnabled:NO];
    [tv setDelegate:self];
    [tv setDataSource:self];
    
    return tv;
}

-(void)initCheckOrder
{
    //收货人信息
    m_ReceiverTableView = [self tableViewFromTemplate];
    [m_ScrollView addSubview:m_ReceiverTableView];
    
    //支付方式
    m_PaymentTableView = [self tableViewFromTemplate];
    [m_ScrollView addSubview:m_PaymentTableView];
    
    //发票信息
    invoiceTV = [self tableViewFromTemplate];
    [m_ScrollView addSubview:invoiceTV];
    
    //提交订单
    m_SubmitBtn=[[UIButton alloc] initWithFrame:CGRectMake(9, 0, 302, 43)];
    [m_SubmitBtn setBackgroundImage:[UIImage imageNamed:@"orange_long_btn.png"] forState:UIControlStateNormal];
    [m_SubmitBtn setTitle:@"提交订单" forState:UIControlStateNormal];
    [m_SubmitBtn setTitleColor:[UIColor whiteColor] forState:UIControlStateNormal];
    [[m_SubmitBtn titleLabel] setFont:[UIFont boldSystemFontOfSize:18.0]];
    [m_SubmitBtn addTarget:self action:@selector(submitOrderBtnClicked:) forControlEvents:UIControlEventTouchDown];
    [m_ScrollView addSubview:m_SubmitBtn];
    [m_SubmitBtn release];
    
    [m_ScrollView setBackgroundColor:[UIColor colorWithRed:240.0/255.0 green:240.0/255.0 blue:240.0/255.0 alpha:1.0]];
    [m_ScrollView setHidden:YES];
}

-(void)updateCheckOrder
{
    double yValue=0.0;
    //收货人信息
    if ([m_CheckOrderVO goodReceiver]==nil) {
        [m_ReceiverTableView setFrame:CGRectMake(0, yValue, 320, 100)];
        yValue+=100;
    } else {
        //255.0-44.0*3 去除收货地址的3行 行高
        double height=255.0-44.0*3;
        if ([[m_CheckOrderVO goodReceiver] receiverMobile]!=nil) {
            height+=22.0;
        }
        if ([[m_CheckOrderVO goodReceiver] receiverPhone]!=nil) {
            height+=22.0;
        }
        [m_ReceiverTableView setFrame:CGRectMake(0, yValue, 320, height)];
        yValue+=height;
    }
    [m_ReceiverTableView reloadData];
    
    
    //支付方式
    [m_PaymentTableView setFrame:CGRectMake(0, yValue, 320, 182+44)];
    [m_PaymentTableView reloadData];
    yValue += 182.0+44;
    
    //发票信息
    invoiceTV.frame = CGRectMake(0, yValue, 320, 100);
    [invoiceTV reloadData];
    //yValue += 100;
    
    //刷新商品table及下面部分
    [self updateCheckOrderForProductTable];
}

//移除包裹的table view
-(void)removeTagTable:(int) num;
{
    for (int i=0; i<num; i++) {
        UITableView *temTable = (UITableView *)[self.view viewWithTag:100+i];
        [temTable removeFromSuperview];
    }
    //移出商品信息的那个标签
    UILabel *temlable = (UILabel *)[self.view viewWithTag:100001];
    [temlable removeFromSuperview];
    [m_MoneyTableView removeFromSuperview];
    [m_ProductTableView removeFromSuperview];
}


//不支持商品配送的时候的处理方式
//-(void)showErrorOfDistribution
//{
//    [self.loadingView hide];
//    NSString *disMessage = self.distributionError;
//    UIAlertView *alert=[[OTSAlertView alloc] initWithTitle:nil message:disMessage delegate:self cancelButtonTitle:@"修改地址" otherButtonTitles:@"删除商品", nil];
//    [alert setTag:ALERTVIEW_TAG_ORDER_DISTRIBUTION];
//	[alert show];
//	[alert release];
//}


//只刷新商品table及下面部分
-(void)updateCheckOrderForProductTable
{
    CGFloat yValue=invoiceTV.frame.origin.y+invoiceTV.frame.size.height;
    
    //这里若有子订单则显示包裹 否则显示商品信息
    
    if ([m_CheckOrderVO.childOrderList count]>0) {
        [self removeTagTable:[m_CheckOrderVO.childOrderList count]];
        //包裹
        UILabel *label = [[UILabel alloc]initWithFrame:CGRectMake(20, yValue, 200, 30)];
        [label setText:@"配送方式"];
        [label setBackgroundColor:[UIColor clearColor]];
        [label setFont:[UIFont boldSystemFontOfSize:17.0]];
        
        [label setTextColor:[UIColor colorWithRed:76.0/255.0 green:86.0/255.0 blue:110.0/255.0 alpha:1.0]];
        [m_ScrollView addSubview:label];
        [label release];
        yValue+=25;
        
        int i;
        for (i=0; i<[[m_CheckOrderVO childOrderList] count]; i++) {
            
            float h = 41.0;
            //            + 93.0*([self countOfPackageProductTable:i]-1);
            NSString * nindex = [NSString stringWithFormat:@"%d",i];
            if ([[self.packgoods objectForKey:nindex] count] == 1)
            {
                h += 53.0*([self countOfPackageProductTable:i]-1);
            }
            else
            {
                h += 53.0*([self countOfPackageProductTable:i]-2) + 30.0;
            }
            
            
            UITableView *tableView=[[UITableView alloc] initWithFrame:CGRectMake(0, yValue, 320, h) style:UITableViewStyleGrouped];
            tableView.sectionHeaderHeight = 0;
            tableView.sectionFooterHeight = 0;
            [tableView setTag:100+i];
            [tableView setBackgroundColor:[UIColor clearColor]];
            [tableView setBackgroundView:nil];
            [tableView setScrollEnabled:NO];
            [tableView setTableHeaderView:nil];
            [tableView setTableFooterView:nil];
            [tableView setDelegate:self];
            [tableView setDataSource:self];
            [m_ScrollView addSubview:tableView];
            [tableView release];
            yValue+=h;
        }
        
        self.m_MoneyTableView = [self tableViewFromTemplate];
        [m_MoneyTableView setFrame:CGRectMake(0, yValue, 320, 280)];
        [m_ScrollView addSubview:m_MoneyTableView];
        yValue+=260.f;
    }
    else
    {
        //商品信息
        self.m_ProductTableView = [self tableViewFromTemplate];
        [m_ScrollView addSubview:m_ProductTableView];
        //商品信息显示
        UILabel *label = [[UILabel alloc]initWithFrame:CGRectMake(20, yValue, 200, 30)];
        [label setText:@"商品信息"];
        [label setTag:100001];
        [label setBackgroundColor:[UIColor clearColor]];
        [label setFont:[UIFont boldSystemFontOfSize:17.0]];
        
        [label setTextColor:[UIColor colorWithRed:76.0/255.0 green:86.0/255.0 blue:110.0/255.0 alpha:1.0]];
        [m_ScrollView addSubview:label];
        [label release];
        yValue+=25;
        
        int goodCount = self.goodItems.count;
        float height = 0.f;
        if ([self isNeedExpand])
        {
            if (!isExpand)
            {
                goodCount = 3;
            }
            
            height = goodCount  * 95.f + 44.f;
        }
        else
        {
            height = goodCount  * 95.f;
        }
        
        height += [self heightForMoneyFristRow] + 44.0 + 60.f;
        
        currentProTabY=yValue;
        [m_ProductTableView setFrame:CGRectMake(0, yValue, 320, height)];
        [m_ProductTableView reloadData];
        yValue+=height;
    }
    //提交订单
    [m_SubmitBtn setFrame:CGRectMake(9, yValue, 302, 43)];
    yValue+=53.0;
    
    [m_ScrollView setContentSize:CGSizeMake(320, yValue)];
    [m_ScrollView setHidden:NO];
    
    //用户无收货地址，进入新建地址界面
    if (!m_HasAddress) {
        m_HasAddress=YES;
        [self enterEditGoodsReceiverFromCart];
        return;
    }
    
    //[self checkThePaymentStatus];
}

#pragma mark 检测提示信息
-(void)checkThePaymentStatus
{
    
    for (PaymentMethodVO *paymentMethod in m_PaymentMethods)
    {
        
        if ([paymentMethod gatewayId]==nil && ![[paymentMethod methodName] isEqualToString:GOODS_PAY_ONLINE])
        {
            if (![paymentMethod.isSupport isEqualToString:@"true"]) {
                if (fromTag == 0 && ([[paymentMethod methodName] isEqualToString:GOODS_TO_PAY] || [[paymentMethod methodName] isEqualToString:GOODS_TO_CARD])) {
                    [self showAlertView:nil alertMsg:@"所选地区暂不支持货到支付" alertTag:ALERTVIEW_TAG_MSG_GATEWAY];
                }
                else if(fromTag == THE_HINT_COUPON){
                    if ([m_PayMethodStr isEqualToString:GOODS_TO_CARD]||[m_PayMethodStr isEqualToString:GOODS_TO_PAY]) {
                        [self showAlertView:nil alertMsg:@"使用抵用券不支持货到支付" alertTag:ALERTVIEW_TAG_MSG_GATEWAY];
                    }
                    fromTag = 0;
                }
                break;
            }
        }
    }
    
}

#pragma mark 返回按钮
-(IBAction)backBtnClicked:(id)sender
{
	PhoneCartViewController* cart = [SharedDelegate.tabBarController.viewControllers objectAtIndex:2];
	[cart setUniqueScrollToTopFor:cart.cartTableView];
    [self removeSelf];
    [SharedDelegate.tabBarController removeViewControllerWithAnimation:[OTSNaviAnimation animationPushFromLeft]];
}

#pragma mark 提交订单按钮
- (BOOL)isOrderFullyPayed
{
    return [m_NeedPayMoneyLabel.text isEqualToString:@"￥0.00"];
}

-(IBAction)submitOrderBtnClicked:(id)sender
{
	if (m_CheckOrderVO.goodReceiver == nil)
    {
        [self showAlertView:nil alertMsg:@"送货地址不能为空!" alertTag:ALERTVIEW_TAG_OTHERS];
	}
    else
    {
		if (![self isOrderFullyPayed]
            && (methodID == -1 || ([m_PaymentWayDetailLbl.text isEqualToString:OTS_EMPTY_STR] && !m_AddressNotSupport)))
        {
            [self showAlertView:nil alertMsg:@"请选择付款方式!" alertTag:ALERTVIEW_TAG_OTHERS];
        }
        else if (![self isOrderFullyPayed]
                 && ([m_PaymentWayDetailLbl.text isEqualToString:OTS_EMPTY_STR] && m_AddressNotSupport))
        {
            [self showAlertView:nil alertMsg:@"您目前的送货地址不支持任何支付方式,请先确认您的送货地址!" alertTag:ALERTVIEW_TAG_OTHERS];
        }
        else
        {
            if ([self isOrderFullyPayed])
            {//全额支付
                m_ThreadState = THREAD_STATUS_SUBMIT_ORDER;
                [self setUpThread:YES];
            }
            else if (paymentType == 1)
            {//网上支付
                m_ThreadState = THREAD_STATUS_SUBMIT_ORDER_EX;
                [self setUpThread:YES];
            }
            else
            {
                m_ThreadState = THREAD_STATUS_SUBMIT_ORDER;
                [self setUpThread:YES];
            }
        }
	}
}

#pragma mark - Address Manage
//跳转到地址列表页
-(void)enterGoodsReceiverList
{
	GoodReceiver* goodRecieverVC = [[[GoodReceiver alloc]initWithNibName:@"GoodReceiver" bundle:nil] autorelease];
    [goodRecieverVC setM_FromTag:FROM_CHECK_ORDER];
    [goodRecieverVC setM_DefaultReceiverId:m_CheckOrderVO.goodReceiver.nid];
    
    [self pushVC:goodRecieverVC animated:YES fullScreen:YES];
}

//进入新建地址界面
-(void)enterEditGoodsReceiver
{
    EditGoodsReceiver *editGoodRecieverVC = [[[EditGoodsReceiver alloc] initWithNibName:@"EditGoodsReceiver" bundle:nil] autorelease];
    [editGoodRecieverVC setM_FromTag:FROM_CHECK_ORDER];
    
    [self pushVC:editGoodRecieverVC animated:YES fullScreen:YES];
}

//从购物车直接进入新建地址界面
-(void)enterEditGoodsReceiverFromCart
{
    EditGoodsReceiver *editGoodRecieverVC = [[[EditGoodsReceiver alloc] initWithNibName:@"EditGoodsReceiver" bundle:nil] autorelease];
    [editGoodRecieverVC setM_FromTag:FROM_CHECK_ORDER];
    [editGoodRecieverVC setIsFromCart:YES];
    [self pushVC:editGoodRecieverVC animated:YES fullScreen:YES];
}

//进入收货地址界面
-(void)enterGoodsReceiver
{
    if (m_NowHasAddress) {
        [self enterGoodsReceiverList];
    } else {
        [self enterEditGoodsReceiver];
    }
}



#pragma mark -
-(void)goToOrderDone:(NSNumber *)orderId
{
    
    OTSOrderSubmitOKVC* submitOKVC = [[[OTSOrderSubmitOKVC alloc] initWithOrderId:[orderId longLongValue]] autorelease];
    [self pushVC:submitOKVC animated:YES fullScreen:YES];
    
    // deprecated line
    //[m_delegate checkOrderToOrderDone:orderId];
    
}

-(void)gotoOrderDone
{
    //    Page *page=[m_OrderService getMyOrderListByToken:[GlobalValue getGlobalValueInstance].token type:[NSNumber numberWithInt:KOtsOrderTypeDefault] currentPage:[NSNumber numberWithInt:1] pageSize:[NSNumber numberWithInt:1]];
    
    Page* page = [m_OrderService getMyOrderListByToken:[GlobalValue getGlobalValueInstance].token
                                                  type:[NSNumber numberWithInt:KOtsOrderTypeDefault]           // 正在处理的订单
                                            orderRange:[NSNumber numberWithInt:0]                              // 0为全部订单（区分普通和团购）
                                              siteType:[NSNumber numberWithInt:1]                              // 1为1号店订单，2为1号商城订单
                                           currentPage:[NSNumber numberWithInt:1]
                                              pageSize:[NSNumber numberWithInt:1]];
    
    if (page!=nil && ![page isKindOfClass:[NSNull class]])
    {
        OrderV2 * v2 = (OrderV2*)[page.objList lastObject];
        [self performSelectorOnMainThread:@selector(goToOrderDone:) withObject:v2.orderId waitUntilDone:NO];
    }
    else
    {
        [self performSelectorOnMainThread:@selector(netError) withObject:nil waitUntilDone:NO];
    }
}


#pragma mark - alert
//显示提示框
-(void)showAlertView:(NSString *) alertTitle alertMsg:(NSString *)alertMsg alertTag:(int)tag {
	[[GlobalValue getGlobalValueInstance] setHaveAlertViewInShow:YES];
    UIAlertView *alert;
    alert=[[OTSAlertView alloc]initWithTitle:alertTitle message:alertMsg delegate:self cancelButtonTitle:@"确认" otherButtonTitles:nil];
    alert.tag=tag;
	[alert show];
	[alert release];
}

-(void)submitOrderSuccess
{
    [self otsDetatchMemorySafeNewThreadSelector:@selector(gotoOrderDone) toTarget:self withObject:nil];
    [SharedDelegate clearCartNum];
    [[NSNotificationCenter defaultCenter] postNotificationName:@"CartChanged" object:nil];
}

-(void)showError:(NSString *)errorInfo
{
    [AlertView showAlertView:nil alertMsg:errorInfo buttonTitles:nil alertTag:ALERTVIEW_TAG_COMMON];
}

//显示提交订单提示框
-(void)showSubmitOrderAlertView:(NSString *)result
{
	switch ([result intValue])
    {
		case 1: {
            [self otsDetatchMemorySafeNewThreadSelector:@selector(gotoOrderDone) toTarget:self withObject:nil];
            [SharedDelegate clearCartNum];
            [[NSNotificationCenter defaultCenter] postNotificationName:@"CartChanged" object:nil];
        }
			break;
		case 0:
			[self showAlertView:nil alertMsg:@"提交失败!" alertTag:ALERTVIEW_TAG_OTHERS];
			break;
		case -1:
			[self showAlertView:nil alertMsg:@"用户没有登录!" alertTag:ALERTVIEW_TAG_OTHERS];
			break;
		case -2:
			[self showAlertView:nil alertMsg:@"订单限制!" alertTag:ALERTVIEW_TAG_OTHERS];
			break;
		case -3:
			[self showAlertView:nil alertMsg:@"抵用券出错!" alertTag:ALERTVIEW_TAG_OTHERS];
			break;
		case -4:
			[self showAlertView:nil alertMsg:@"产品售完!" alertTag:ALERTVIEW_TAG_OTHERS];
			break;
		case -5:
			[self showAlertView:nil alertMsg:@"库存出错!" alertTag:ALERTVIEW_TAG_OTHERS];
			break;
		case -6:
			[self showAlertView:nil alertMsg:@"订单验证错误!" alertTag:ALERTVIEW_TAG_OTHERS];
			break;
		case -7:
			[self showAlertView:nil alertMsg:@"dsp错误!" alertTag:ALERTVIEW_TAG_OTHERS];
			break;
		case -8:
			[self showAlertView:nil alertMsg:@"秒杀产品错误!" alertTag:ALERTVIEW_TAG_OTHERS];
			break;
		case -9:
			[self showAlertView:nil alertMsg:@"每日一销产品错误!" alertTag:ALERTVIEW_TAG_OTHERS];
			break;
		case -10:
			[self showAlertView:nil alertMsg:@"到达每日下单上限!" alertTag:ALERTVIEW_TAG_OTHERS];
			break;
		case -11:
			[self showAlertView:nil alertMsg:@"礼品错误!" alertTag:ALERTVIEW_TAG_OTHERS];
			break;
		case -12:
			[self showAlertView:nil alertMsg:@"账户金额不足!" alertTag:ALERTVIEW_TAG_OTHERS];
			break;
		case -19:
			[self showAlertView:nil alertMsg:@"订单不存在!" alertTag:ALERTVIEW_TAG_OTHERS];
			break;
		default:
			[self showAlertView:nil alertMsg:@"网络异常,请检查网络配置..." alertTag:ALERTVIEW_TAG_OTHERS];
			break;
	}
}

//显示在线支付提交订单提示框
-(void)showSubmitOrderExAlertView:(NSString *)result {
	switch ([result longLongValue]) {
		case 0:
			[self showAlertView:nil alertMsg:@"提交失败!" alertTag:ALERTVIEW_TAG_OTHERS];
			break;
		case -1:
			[self showAlertView:nil alertMsg:@"用户没有登录!" alertTag:ALERTVIEW_TAG_OTHERS];
			break;
		case -2:
			[self showAlertView:nil alertMsg:@"订单限制!" alertTag:ALERTVIEW_TAG_OTHERS];
			break;
		case -3:
			[self showAlertView:nil alertMsg:@"抵用券出错!" alertTag:ALERTVIEW_TAG_OTHERS];
			break;
		case -4:
			[self showAlertView:nil alertMsg:@"产品售完!" alertTag:ALERTVIEW_TAG_OTHERS];
			break;
		case -5:
			[self showAlertView:nil alertMsg:@"库存出错!" alertTag:ALERTVIEW_TAG_OTHERS];
			break;
		case -6:
			[self showAlertView:nil alertMsg:@"订单验证错误!" alertTag:ALERTVIEW_TAG_OTHERS];
			break;
		case -7:
			[self showAlertView:nil alertMsg:@"dsp错误!" alertTag:ALERTVIEW_TAG_OTHERS];
			break;
		case -8:
			[self showAlertView:nil alertMsg:@"秒杀产品错误!" alertTag:ALERTVIEW_TAG_OTHERS];
			break;
		case -9:
			[self showAlertView:nil alertMsg:@"每日一销产品错误!" alertTag:ALERTVIEW_TAG_OTHERS];
			break;
		case -10:
			[self showAlertView:nil alertMsg:@"到达每日下单上限!" alertTag:ALERTVIEW_TAG_OTHERS];
			break;
		case -11:
			[self showAlertView:nil alertMsg:@"礼品错误!" alertTag:ALERTVIEW_TAG_OTHERS];
			break;
		case -12:
			[self showAlertView:nil alertMsg:@"账户金额不足!" alertTag:ALERTVIEW_TAG_OTHERS];
			break;
		case -19:
			[self showAlertView:nil alertMsg:@"订单不存在!" alertTag:ALERTVIEW_TAG_OTHERS];
			break;
            
		default:
        {
            OTSOrderSubmitOKVC* submitOKVC = [[[OTSOrderSubmitOKVC alloc] initWithOrderId:[result longLongValue]] autorelease];
            [self pushVC:submitOKVC animated:YES fullScreen:YES];
            
            CGRect theRc = self.view.frame;
            submitOKVC.view.frame = theRc;
            
            [SharedDelegate clearCartNum];
            
            [[NSNotificationCenter defaultCenter] postNotificationName:@"CartChanged" object:nil];
        }
			break;
	}
}

//进入在线支付页面
-(void)enterOnlinePayWithOrderId:(NSNumber *)orderId
{
    //清空购物车
    m_ThreadState=THREAD_STATUS_CLEAR_ALLPRODUCTS;
    [self setUpThread:YES];
    
    //进入在线支付页面
    [self removeSubControllerClass:[OnlinePay class]];
    
    OnlinePay* onlinePayVC = [[[OnlinePay alloc] initWithNibName:@"OnlinePay" bundle:nil] autorelease];
    [onlinePayVC setIsFromOrder:YES];
    [onlinePayVC setOrderId:orderId];
    [onlinePayVC setGatewayId:[NSNumber numberWithInt:gatewayType]];
    
    [self pushVC:onlinePayVC animated:YES fullScreen:YES];
    
    //    [self.view.layer addAnimation:[OTSNaviAnimation animationPushFromRight] forKey:@"Reveal"];
    //    [self.view addSubview:m_OnlinePay.view];
}

-(void)updatePaymentShow
{
    [self setPaymentLabel:m_PayMethodStr];
}

//网络异常
-(void)netError
{
    [AlertView showAlertView:nil alertMsg:@"网络异常，请检查网络配置..." buttonTitles:nil
                    alertTag:ALERTVIEW_TAG_COMMON];
}

//使用余额支付
-(void)enterAccountBalancePay
{
    double needPayMoney=[m_CheckOrderVO.productAmount doubleValue]+[m_CheckOrderVO.deliveryAmount doubleValue]-m_UseCouponMoney-[m_CheckOrderVO.cashAmount doubleValue];
    
    NSMutableDictionary *balancPayInfoDic=[NSMutableDictionary dictionary];
    AccountBalance *accountBalanceVC = [[[AccountBalance alloc] initWithNibName:@"AccountBalance" bundle:nil] autorelease];
    if (balanceStyle == BALANCE_PAY_CASH) {
        [balancPayInfoDic setObject:[NSNumber numberWithDouble:m_BalanceMoney] forKey:@"AccountBalance"];
        [balancPayInfoDic setObject:[NSNumber numberWithDouble:m_FrozenMoney] forKey:@"FrozenMoney"];
        [balancPayInfoDic setObject:[NSNumber numberWithDouble:needPayMoney-m_GiftCardPayMoney] forKey:@"NeedPayMoney"];
        [accountBalanceVC setPayStyle:0];
        [accountBalanceVC setTaget:self finishSelector:@selector(showAccountPayMoney:) type:1];
    }else{
        [balancPayInfoDic setObject:[NSNumber numberWithDouble:m_GiftCardBalance] forKey:@"AccountBalance"];
        [balancPayInfoDic setObject:[NSNumber numberWithDouble:m_FrozenGiftCardBalance] forKey:@"FrozenMoney"];
        [balancPayInfoDic setObject:[NSNumber numberWithInt:numberOfGiftCard] forKey:@"NumberOfGiftCard"];
        [balancPayInfoDic setObject:[NSNumber numberWithDouble:needPayMoney-m_AccountPayMoney] forKey:@"NeedPayMoney"];
        [accountBalanceVC setPayStyle:1];
        [accountBalanceVC setTaget:self finishSelector:@selector(showGiftCardPayMoney:) type:1];
    }
    [balancPayInfoDic setObject:[NSNumber numberWithBool:NO] forKey:@"ShowBalanceDetail"];
    [accountBalanceVC setM_InputDictionay:balancPayInfoDic];
    
    
    [self pushVC:accountBalanceVC animated:YES fullScreen:YES];
    
    //    [self.view addSubview:m_AccountBalance.view];
    //    [self.view.layer addAnimation:[OTSNaviAnimation animationPushFromRight] forKey:@"Reveal"];
}

//进入使用抵用券页面
-(void)enterUseCoupon
{
    UseCoupon *useCoupon =[[[UseCoupon alloc] initWithNibName:@"UseCoupon" bundle:nil] autorelease];
    [useCoupon setTaget:self finishSelector:@selector(showUseCouponMoney:)];
    [useCoupon setM_CouponNumber:[[[m_Mycoupon number] copy] autorelease]];
    [useCoupon setM_OriginalCouponNumber:[[[m_Mycoupon number] copy] autorelease]];
    [self pushVC:useCoupon animated:YES fullScreen:YES];
}

#pragma mark 建立线程
-(void)setUpThread:(BOOL)showLoading
{
	if (!m_ThreadRunning)
    {
		m_ThreadRunning=YES;
        [self showLoading:showLoading];
		[self otsDetatchMemorySafeNewThreadSelector:@selector(startThread) toTarget:self withObject:nil];
	}
}
#pragma mark 开启线程
-(void)startThread {
	while (m_ThreadRunning) {
		@synchronized(self)
        {
            switch (m_ThreadState)
            {
                case THREAD_STATUS_GET_ACCOUNT_BALANCE: {//获取账户余额
                    NSAutoreleasePool *pool=[[NSAutoreleasePool alloc] init];
                    UserService *service=[[UserService alloc] init];
                    UserVO *tempVO;
                    @try {
                        tempVO=[service getMyYihaodianSessionUser:[GlobalValue getGlobalValueInstance].token];
                    }
                    @catch (NSException * e) {
                    }
                    @finally {
                        if (tempVO!=nil && ![tempVO isKindOfClass:[NSNull class]]) {
                            m_BalanceMoney=[[tempVO availableAmount] doubleValue];
                            m_FrozenMoney=[[tempVO frozenAmount] doubleValue];
                            
                            numberOfGiftCard = [[tempVO cardNum] intValue];
                            m_GiftCardBalance = [[tempVO availableCardAmount]doubleValue];
                            m_FrozenGiftCardBalance = [[tempVO frozenCardAmount]doubleValue];
                            
                            [self performSelectorOnMainThread:@selector(enterAccountBalancePay) withObject:nil waitUntilDone:NO];
                            [[GlobalValue getGlobalValueInstance]setCurrentUser:tempVO];
                        } else {
                            m_BalanceMoney=0.0;
                            m_FrozenMoney=0.0;
                            [self performSelectorOnMainThread:@selector(netError) withObject:nil waitUntilDone:NO];
                        }
                        [self stopThread];
                    }
                    [pool drain];
                    break;
                }
                case THREAD_STATUS_GET_ACCOUNT_COUPON: {//获取账户抵用券信息
                    NSAutoreleasePool *pool=[[NSAutoreleasePool alloc] init];
                    UserService *service=[[UserService alloc] init];
                    UserVO *tempVO;
                    @try {
                        tempVO=[service getMyYihaodianSessionUser:[GlobalValue getGlobalValueInstance].token];
                    }
                    @catch (NSException * e) {
                    }
                    @finally {
                        if (tempVO!=nil && ![tempVO isKindOfClass:[NSNull class]]) {
                            [self performSelectorOnMainThread:@selector(enterUseCoupon) withObject:nil waitUntilDone:NO];
                            [[GlobalValue getGlobalValueInstance]setCurrentUser:tempVO];
                        } else {
                            [self performSelectorOnMainThread:@selector(netError) withObject:nil waitUntilDone:NO];
                        }
                        [self stopThread];
                    }
                    [pool drain];
                    break;
                }
                case THREAD_STATUS_GET_RECEIVERLIST: {//获取送货地址信息
                    NSAutoreleasePool *pool=[[NSAutoreleasePool alloc] init];
                    AddressService *aServ=[[AddressService alloc] init];
                    NSArray *tempArray=nil;
                    @try {
                        tempArray=[aServ getGoodReceiverListByToken:[GlobalValue getGlobalValueInstance].token];
                    } @catch (NSException * e) {
                    } @finally {
                        if (tempArray==nil || [tempArray isKindOfClass:[NSNull class]]) {
                            [self performSelectorOnMainThread:@selector(netError) withObject:nil waitUntilDone:NO];
                        } else {
                            if ([tempArray count]==0) {
                                m_NowHasAddress=NO;
                            } else {
                                m_NowHasAddress=YES;
                            }
                            [self performSelectorOnMainThread:@selector(enterGoodsReceiver) withObject:nil waitUntilDone:NO];
                        }
                        [aServ release];
                        [self stopThread];
                    }
                    [pool drain];
                    break;
                }
				case THREAD_STATUS_SAVE_PAYMENT_ONLY:{	// 保存付款方式重新获取订单
					NSAutoreleasePool * pool = [[NSAutoreleasePool alloc] init];
                    int result=0;
					@try {
						result=[m_OrderService savePaymentToSessionOrder:[GlobalValue getGlobalValueInstance].token methodid:[NSNumber numberWithInt:methodID] gatewayid:[NSNumber numberWithInt:gatewayType]];
                        if (result!=1)
                        {
                            [self showAlertView:nil alertMsg:@"保存支付方式失败" alertTag:ALERTVIEW_TAG_OTHERS];
                            //[[NSNotificationCenter defaultCenter] postNotificationName:@"MainWindowHideLoading" object:nil];
                            [self hideLoading];
                            [pool drain];
                            break;
                        }
					}
					@catch (NSException * e) {
					}
					@finally {
						[self stopThread];
                        [self performSelectorOnMainThread:@selector(updatePaymentShow) withObject:nil waitUntilDone:NO];
					}
					[pool drain];
                    break;
				}
                case THREAD_STATUS_GET_SESSIONORDER: {//获取Session订单
                    NSAutoreleasePool *pool=[[NSAutoreleasePool alloc] init];
                    OrderVO *tmpOrderVO=nil;
                    @try {
						tmpOrderVO=[m_OrderService getSessionOrder:[GlobalValue getGlobalValueInstance].token];
                        //过滤掉订单中的赠品
                        tmpOrderVO = [self filterGifts:tmpOrderVO];
                    } @catch (NSException * e) {
                    } @finally {
                        if (m_CheckOrderVO!=nil) {
                            [m_CheckOrderVO release];
                        }
						if (![tmpOrderVO isKindOfClass:[NSNull class]])
                        {
							m_CheckOrderVO=[tmpOrderVO retain];
                            
                            [self updateGoodItems];
                            
                            if (m_Mycoupon!=nil) {
                                [m_Mycoupon release];
                            }
                            m_Mycoupon=[[m_CheckOrderVO coupon] retain];
                            //                            m_UseCouponMoney=[[m_Mycoupon amount] doubleValue];
                            m_UseCouponMoney = [m_CheckOrderVO.couponAmount doubleValue];
                            m_AccountPayMoney=[m_CheckOrderVO.accountAmount doubleValue];
                            m_GiftCardPayMoney = [m_CheckOrderVO.cardAmount doubleValue];
                            
                            
                            //--------使用余额全额支付后再用抵用券，还需支付剩负数的时候余额支付重置---
                            double needPayMoney=[m_CheckOrderVO.productAmount doubleValue]+[m_CheckOrderVO.deliveryAmount doubleValue]-m_AccountPayMoney-m_UseCouponMoney-[m_CheckOrderVO.cashAmount doubleValue]- m_GiftCardPayMoney;
                            if (needPayMoney<0) {
                                m_AccountPayMoney = 0;
                            }
						}
                        else
                        {
                            m_CheckOrderVO=nil;
                            [self updateGoodItems];
                        }
                        m_ThreadState = THREAD_STATUS_GET_PAYMENT_METHOD;
                    }
                    [pool drain];
                    break;
                }
                case THREAD_STATUS_GET_PAYMENT_METHOD: {//获取支付方式
                    NSAutoreleasePool *pool=[[NSAutoreleasePool alloc] init];
                    NSArray *tempArray=nil;
                    @try {
						if ([m_CheckOrderVO goodReceiver]!=nil) {
                            //tempArray=[m_OrderService getPaymentMethodsForSessionOrder:[GlobalValue getGlobalValueInstance].token];
                            //新接口，返回包括了不支持货到付款的原因
                            tempArray=[m_OrderService getPaymentMethodsForSessionOrderV2:[GlobalValue getGlobalValueInstance].token];
                        }
                    } @catch (NSException * e) {
                    } @finally {
                        if (m_PaymentMethods!=nil) {
                            [m_PaymentMethods release];
                        }
                        m_PaymentMethods=[[NSArray alloc] initWithArray:tempArray];
                        [self performSelectorOnMainThread:@selector(updateCheckOrder) withObject:nil waitUntilDone:NO];
                        [self stopThread];
                        
                        JSTrackingPrama* prama = [[[JSTrackingPrama alloc]initWithJSType:EJStracking_CheckPayment extraPramaDic:nil]autorelease];
                        [DoTracking doJsTrackingWithParma:prama];
                    }
                    [pool drain];
                    break;
                }
                case THREAD_STATUS_CLEAR_ALLPRODUCTS: {  // 清除购物车中商品
                    NSAutoreleasePool * pool = [[NSAutoreleasePool alloc] init];
                    @try {
                        CartService * cServ = [[CartService alloc]init];
						[cServ delAllProduct:[GlobalValue getGlobalValueInstance].token];
						[SharedDelegate clearCartNum];
                        [[NSNotificationCenter defaultCenter] postNotificationName:@"CartChanged" object:nil];
						[cServ release];
                    } @catch (NSException * e) {
                    } @finally {
                        [self stopThread];
                    }
                    [pool drain];
                    break;
                }
                case THREAD_STATUS_SUBMIT_ORDER: {//保存支付方式并提交订单
                    NSAutoreleasePool * pool = [[NSAutoreleasePool alloc] init];
                    @try {
						//保存发票
						if (isNeedInvoice) {
							int result1 = [m_OrderService saveInvoiceToSessionOrder:[GlobalValue getGlobalValueInstance].token invoiceTitle:m_Invoice.m_InvoiceTitle invoiceContent:m_Invoice.m_InvoiceContent invoiceAmount:m_CheckOrderVO.productAmount];
							DebugLog(@"the result is:%d \n invoice vo is:%@, %@, %@",result1,m_Invoice.m_InvoiceTitle,m_Invoice.m_InvoiceContent,m_CheckOrderVO.productAmount);
						}
						//保存并提交订单
                        int theMethodId;
                        int theGatewayType;
                        if ([self isOrderFullyPayed]) {//全额支付
                            theMethodId=0;
                            theGatewayType=-1;
                        } else {
                            theMethodId=methodID;
                            theGatewayType=gatewayType;
                        }
                        
                        int result = [m_OrderService savePaymentToSessionOrder:[GlobalValue getGlobalValueInstance].token methodid:[NSNumber numberWithInt:theMethodId] gatewayid:[NSNumber numberWithInt:theGatewayType]];
                        if (result!=1) {
                            [self showAlertView:nil alertMsg:@"保存支付方式失败" alertTag:ALERTVIEW_TAG_OTHERS];
                            [self stopThread];
                        } else {
                            SubmitOrderResult *submitResult = [m_OrderService submitOrderV2:[GlobalValue getGlobalValueInstance].token];
                            if (submitResult!=nil && ![submitResult isKindOfClass:[NSNull class]]) {
                                if ([[submitResult resultCode] intValue]==1) {//成功
                                    [self performSelectorOnMainThread:@selector(submitOrderSuccess) withObject:nil waitUntilDone:NO];
                                } else {
                                    [self performSelectorOnMainThread:@selector(showError:) withObject:[submitResult errorInfo] waitUntilDone:NO];
                                }
                            } else {
                                [self performSelectorOnMainThread:@selector(showError:) withObject:@"网络异常，请检查网络配置..." waitUntilDone:NO];
                            }
                        }
                        //统计
                        JSTrackingPrama* prama = [[[JSTrackingPrama alloc]initWithJSType:EJStracking_SavePayment extraPrama:[NSString stringWithFormat:@"%d",theMethodId], [NSString stringWithFormat:@"%d",theGatewayType], nil]autorelease];
                        [DoTracking doJsTrackingWithParma:prama];
                    } @catch (NSException * e) {
                    } @finally {
                        [self stopThread];
                    }
                    [pool drain];
                    break;
                }
                case THREAD_STATUS_SUBMIT_ORDER_EX: {//保存支付方式并提交订单
                    NSAutoreleasePool * pool = [[NSAutoreleasePool alloc] init];
					@try {
						//保存发票
						if (isNeedInvoice)
                        {
							int result1 = [m_OrderService saveInvoiceToSessionOrder:[GlobalValue getGlobalValueInstance].token invoiceTitle:m_Invoice.m_InvoiceTitle invoiceContent:m_Invoice.m_InvoiceContent invoiceAmount:m_CheckOrderVO.productAmount];
                            
							DebugLog(@"the result is:%d \n invoice vo is:%@, %@, %@",result1,m_Invoice.m_InvoiceTitle,m_Invoice.m_InvoiceContent,m_CheckOrderVO.productAmount);
						}
                        
						//保存并提交订单
                        int theMethodId;
                        int theGatewayType;
                        if ([self isOrderFullyPayed]) {//全额支付
                            theMethodId=0;
                            theGatewayType=-1;
                        } else {
                            theMethodId=methodID;
                            theGatewayType=gatewayType;
                        }
						long long int result = [m_OrderService savePaymentToSessionOrder:[GlobalValue getGlobalValueInstance].token methodid:[NSNumber numberWithInt:theMethodId] gatewayid:[NSNumber numberWithInt:theGatewayType]];
                        if (result!=1)
                        {
                            [self showAlertView:nil alertMsg:@"保存支付方式失败" alertTag:ALERTVIEW_TAG_OTHERS];
                            [self stopThread];
                        }
                        else
                        {
                            result = [m_OrderService submitOrderEx:[GlobalValue getGlobalValueInstance].token];
                        }
                        [self performSelectorOnMainThread:@selector(showSubmitOrderExAlertView:)
											   withObject:[NSString stringWithFormat:@"%lli", result] waitUntilDone:NO];
					}
					@catch (NSException * e) {
					}
					@finally {
						[self stopThread];
					}
					[pool drain];
                    break;
                }
                default:
                    break;
            }
            
		}
	}
}


-(void)updateGoodItems
{
    [self.goodItems removeAllObjects];
    [self.goodItems addObjectsFromArray:self.goods];
    //[self.goodItems addObjectsFromArray:self.gifts];
    
    //更新包裹商品
    [self updatePackGoodItems];
}

-(void)updatePackGoodItems
{
    [self.packGoodItems removeAllObjects];
    [self.packGoodItems addEntriesFromDictionary:self.packgoods];
}

#pragma mark 停止线程
-(void)stopThread {
	m_ThreadRunning=NO;
	m_ThreadState=-1;
    [self hideLoading];
}

//选择银行
-(void)showChooseBankView
{
    [self removeSubControllerClass:[OnlinePay class]];
    NSMutableArray *mArray=[NSMutableArray array];
    for (PaymentMethodVO *paymentMehtod in m_PaymentMethods)
    {
        if ([paymentMehtod gatewayId]==nil)
        {
            [mArray addObject:paymentMehtod];
        }
    }
    
    OnlinePay* onlinePayVC = [[[OnlinePay alloc] initWithNibName:@"OnlinePay" bundle:nil] autorelease];
    [onlinePayVC setMethodID:methodID];
    [onlinePayVC setIsFromCheckOrder:YES];
    [onlinePayVC setGatewayId:[NSNumber numberWithInt:gatewayType]];
    [onlinePayVC setPayMentWayArr:mArray];
    [onlinePayVC setPayMethodStr:self.m_PayMethodStr];
    
    [self pushVC:onlinePayVC animated:YES fullScreen:YES];
    //    [self.view.layer addAnimation:[OTSNaviAnimation animationPushFromRight] forKey:@"Reveal"];
    //    [self.view addSubview:m_OnlinePay.view];
}

#pragma mark tableview相关部分

//设置列表行内容
-(UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath
{
    if (tableView==m_ReceiverTableView)
    {
        return [self receiverTableViewCellAtIndex:[indexPath row]];
    }
    else if (tableView==m_ProductTableView)
    {
        return [self productTableViewCellAtIndex:[indexPath row]];
        
    }
    else if (tableView==m_PaymentTableView)
    {
        return [self paymentTableViewCellAtIndex:[indexPath row]];
    }
    
    else if (tableView == invoiceTV)
    {
        return [self decorateCell:[self cellWithStyle:UITableViewCellStyleValue1] type:EOtsCoCellInvoice];
    }
    else if (tableView==m_MoneyTableView)
    {
        return [self moneyTableViewCellAtIndex:[indexPath row]];
    }
    //包裹
    else if ([tableView tag]>=100)
    {
        return [self packageTableViewCellAtIndexPath:indexPath iN:tableView];
    }
    else
    {
        UITableViewCell *cell=[[[UITableViewCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:nil] autorelease];
        [cell setBackgroundColor:[UIColor whiteColor]];
        cell.selectionStyle=UITableViewCellSelectionStyleNone;
        cell.accessoryType=UITableViewCellAccessoryNone;
        return cell;
    }
}

-(void)tableView:(UITableView * )tableView didSelectRowAtIndexPath:(NSIndexPath * )indexPath
{
	[tableView deselectRowAtIndexPath:indexPath animated:YES];
    
    if (tableView==m_ReceiverTableView)
    {
        if ([indexPath row]==0) {
            [self receiverTableViewClicked];
        } else if(indexPath.row==3){
            [self showDeliverAmountRegular];
        }
    }
    
    else if (tableView==m_ProductTableView)
    {
        [self productTableViewClicked:[indexPath row]];
        
        [tableView reloadSections:[NSIndexSet indexSetWithIndex:0] withRowAnimation:UITableViewRowAnimationFade];
    }
    
    else if (tableView==m_PaymentTableView)
    {
        if ([indexPath row] == 0)
        {
            [self paymentMethodTableViewClicked];
        }
        
        if ([indexPath row] == 1)
        {
            [self useCouponClicked];
        }
        else if ([indexPath row] == 2)
        {
            self.balanceStyle = BALANCE_PAY_GIFTCARD;
            [self balancePayClicked];
        }
        else if ([indexPath row] == 3)
        {
            self.balanceStyle = BALANCE_PAY_CASH;
            [self balancePayClicked];
        }
    }
    
    else if (tableView == invoiceTV)
    {
        [self InvoiceTableViewClicked];
    }
    
    else if (tableView == m_MoneyTableView)
    {
    }
    // tableView tag > 100 表示是包裹的 table
    else if ([tableView tag]>=100)
    {
        int packageTableIndex = tableView.tag - 100;
        int packageCellIndex = [indexPath row];
        [self packageProductTableViewClicked:packageTableIndex Cell:packageCellIndex];
        [tableView reloadSections:[NSIndexSet indexSetWithIndex:0] withRowAnimation:UITableViewRowAnimationFade];
    }
}

//设置列表行数
-(NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section
{
    if (tableView==m_ReceiverTableView) {
        //收货地址留一行
//        if ([m_CheckOrderVO goodReceiver]!=nil) {
//            return 4;
//        }
        return 1;
    }
    else if (tableView==m_ProductTableView)
    {
        return [self countOfProductTable];
        
#if 0
        if (count<=3) {
            if (m_UserSelectedGiftArray!=nil && [m_UserSelectedGiftArray count]>0) {
                return count+1+2;
            } else {
                return count+2;
            }
        } else if (count>3 && !m_ShowAllProduct) {
            if (m_UserSelectedGiftArray!=nil && [m_UserSelectedGiftArray count]>0) {
                return 5+2;
            } else {
                return 4+2;
            }
        } else {
            if (m_UserSelectedGiftArray!=nil && [m_UserSelectedGiftArray count]>0) {
                return count+2+2;
            } else {
                return count+1+2;
            }
        }
#endif
        
    }
    else if (tableView==m_PaymentTableView)
    {
        return 4;
    }
    
    else if (tableView == invoiceTV)
    {
        return 1;
    }
    else if (tableView==m_MoneyTableView)
    {
        return 2;
    }
    // tableView tag > 100 表示是包裹的 table
    else if ([tableView tag]>=100)
    {
        int packageIndex = tableView.tag - 100;
        
        //        return [self packcountOfchildlist:packageIndex]+1;
        
        return [self countOfPackageProductTable:packageIndex];
    }
    
    return 0;
}

// 设置列表表头
-(NSString *)tableView:(UITableView *)tableView titleForHeaderInSection:(NSInteger)section
{
    if (tableView==m_ReceiverTableView)
    {
        return @"收货地址";
    }
    //    else if (tableView==m_ProductTableView)
    //    {
    //        return nil;
    //    }
    else if (tableView==m_PaymentTableView)
    {
        return @"支付信息";
    }
    
    else if (tableView == invoiceTV)
    {
        return @"发票信息";
    }
    else if (tableView==m_MoneyTableView)
    {
        return nil;
    }
    //显示包裹表头
    //    else if ([tableView tag]==100)
    //    {
    //        return nil;
    //    }
    return nil;
    
}

//设置列表行高
-(CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath {
    if (tableView==m_ReceiverTableView) {
        if ([indexPath row]==0) {
            if ([m_CheckOrderVO goodReceiver]==nil) {
                return 44.0;
            } else {
                double height=76.0;
                if ([[m_CheckOrderVO goodReceiver] receiverMobile]!=nil) {
                    height+=22.0;
                }
                if ([[m_CheckOrderVO goodReceiver] receiverPhone]!=nil) {
                    height+=22.0;
                }
                return height;
            }
        } else {
            return 44.0;
        }
    }
    
    else if (tableView==m_ProductTableView)
    {
        
        int count = [self countOfProductTable];
        if ([self isNeedExpand] && indexPath.row == count - 3)
        {
            return 44.f;
        }
        else if (indexPath.row == count - 2)
        {
            return [self heightForMoneyFristRow];
        }
        else if (indexPath.row == count - 1)
        {
            return 44.f;
        }
        
        return 105.f;
        
#if 0
        if (count>3)
        {
            if (!m_ShowAllProduct)
            {
                //有赠品 且未展开显示前3个商品＋1个展开＋1个赠品＋2金额
                if (m_UserSelectedGiftArray!=nil&&m_UserSelectedGiftArray.count) {
                    if ([indexPath row]==3 || [indexPath row]==4) {
                        return 44.0;
                    }else if (indexPath.row==5) {
                        return [self heightForMoneyFristRow];
                    }else if (indexPath.row==6) {
                        return 44;
                    }
                }else {//没赠品 没展开商品 3个＋1展开＋2金额
                    if (indexPath.row==3) {
                        return 44;
                    }else if (indexPath.row==4) {
                        return [self heightForMoneyFristRow];
                    }else if (indexPath.row==5) {
                        return 44;
                    }
                }
                return 105.0;
            }
            
            else
            {//展开了
                //有赠品
                if (m_UserSelectedGiftArray!=nil&&m_UserSelectedGiftArray.count) {
                    if (indexPath.row==count||[indexPath row] == count+1) {
                        return 44;
                    }else if (indexPath.row==count+2) {
                        return [self heightForMoneyFristRow];
                    }else if (indexPath.row==count+3) {
                        return 44;
                    }
                    return 105;
                }else {
                    if (indexPath.row==count) {
                        return 44;
                    }else if (indexPath.row==count+1) {
                        return [self heightForMoneyFristRow];
                    }else if (indexPath.row==count+2) {
                        return 44;
                    }
                    return 105;
                }
            }
            
        } else {
            // 商品数量小于3，全部显示，不存在展开收起栏
            //有赠品 显示商品数+1赠品＋2金额
            if (m_UserSelectedGiftArray!=nil&&m_UserSelectedGiftArray.count) {
                if (indexPath.row==count) {
                    return 44;
                }else if (indexPath.row==count+1) {
                    return [self heightForMoneyFristRow];
                }else if (indexPath.row==count+2) {
                    return 44;
                }
                
            }else {
                //没赠品   商品+金额
                if (indexPath.row==count ){
                    return [self heightForMoneyFristRow];
                }else if (indexPath.row==count+1) {
                    return 44;
                }
            }
            
            return 105.0;
        }
#endif
        
    }
    
    else if (tableView==m_PaymentTableView)
    {
        return 44.0;
    }
    
    else if (tableView == invoiceTV)
    {
        return 44.0;
    }
    
    else if (tableView==m_MoneyTableView) // 这里压根就没用到，扯蛋玩意儿。这个被并到 productTableView里面去了。去那里改吧，骚年！！！
    {
        if ([indexPath row]==0)
        {
            //满减 和 赠品 的坐标偏移
            float OffsetY= 135.0+23+25;
            //            if ([[m_Mycoupon amount] doubleValue]>0.0) {
            //                OffsetY+= 25.0;
            //            }
            //            if ([m_CheckOrderVO.cashAmount  doubleValue]>0.0) {
            //                OffsetY+=25.0;
            //            }
            return OffsetY;
        }
        else if ([indexPath row]==1)
        {
            return 44.0;
        }
    }
    else if ([tableView tag]>=100) {
        
        int Tableindex = [tableView tag] - 100;
        NSString *nindex  = [NSString stringWithFormat:@"%d",Tableindex];
        
        int cellcount = [self countOfPackageProductTable:Tableindex];
        
        if ([indexPath row]==0)
        {
            return 30.0;
        }
        if ([self isNeedExpand:nindex] && [indexPath row] == cellcount - 1)
        {
            return 30.0;
        }
        else
        {
            return 53.0;
        }
    }
    
    return 0.0;
}



-(void)receiverTableViewClicked
{
    [self enterGoodsReceiverList];
//    m_ThreadState=THREAD_STATUS_GET_RECEIVERLIST;
//    [self setUpThread:YES];
}
//运费规则
-(void)showDeliverAmountRegular{
    
    
}
-(void)balancePayClicked
{
    if ([[m_PaymentWayDetailLbl text] isEqualToString:OTS_EMPTY_STR] && [m_CheckOrderVO goodReceiver]==nil) {
        [self showAlertView:nil alertMsg:@"您目前没有选择送货地址,请先选择您的送货地址!" alertTag:ALERTVIEW_TAG_OTHERS];
    } else if ([[m_PaymentWayDetailLbl text] isEqualToString:OTS_EMPTY_STR] && m_AddressNotSupport) {
        [self showAlertView:nil alertMsg:@"您目前的送货地址不支持任何支付方式,请先确认您的送货地址!" alertTag:ALERTVIEW_TAG_OTHERS];
    } else {
        m_ThreadState=THREAD_STATUS_GET_ACCOUNT_BALANCE;
        [self setUpThread:YES];
    }
}

-(void)useCouponClicked
{
    if ([[m_PaymentWayDetailLbl text] isEqualToString:OTS_EMPTY_STR] && [m_CheckOrderVO goodReceiver]==nil) {
        [self showAlertView:nil alertMsg:@"您目前没有选择送货地址,请先选择您的送货地址!" alertTag:ALERTVIEW_TAG_OTHERS];
    } else if ([[m_PaymentWayDetailLbl text] isEqualToString:OTS_EMPTY_STR] && m_AddressNotSupport) {
        [self showAlertView:nil alertMsg:@"您目前的送货地址不支持任何支付方式,请先确认您的送货地址!" alertTag:ALERTVIEW_TAG_OTHERS];
    } else {
        m_ThreadState=THREAD_STATUS_GET_ACCOUNT_COUPON;
        [self setUpThread:NO];
    }
}

-(void)InvoiceTableViewClicked
{
    if ([m_CheckOrderVO goodReceiver]==nil) {
        [self showAlertView:nil alertMsg:@"您目前没有选择送货地址,请先选择您的送货地址!" alertTag:ALERTVIEW_TAG_OTHERS];
    } else if ([m_CheckOrderVO.paymentMethodForString isEqualToString:@"此地址不支持货到付款"]) {
        [self showAlertView:nil alertMsg:@"您目前的送货地址不正确,请先确认您的送货地址!" alertTag:ALERTVIEW_TAG_OTHERS];
    } else if ([m_CheckOrderVO.productAmount doubleValue] == 0) {
		[self showAlertView:nil alertMsg:@"商品金额为0，无法开具发票" alertTag:ALERTVIEW_TAG_OTHERS];
	} else {
        
        //  Invoice* invoiceVC = [[[Invoice alloc] initWithNibName:@"Invoice" bundle:nil] autorelease];  //此方法会导致viewdidload会在被release的时候立即调用，暂停使用
        if (m_Invoice != nil) {
            [m_Invoice release];
            m_Invoice = nil;
        }
        Invoice* invoiceVC = [[[Invoice alloc] init] autorelease];
        self.m_Invoice = invoiceVC;
        invoiceVC.isFullScreen = YES;
        
		
		if ( editInvoiceVO == nil ) {
			NSArray* paths = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES);
			NSString* directory = [paths objectAtIndex:0];
			NSString* fileName = [directory stringByAppendingPathComponent:@"InvoiceTitle.plist"];
			if ([[NSFileManager defaultManager] fileExistsAtPath:fileName]) {
				NSString* tempstr = [NSString stringWithContentsOfFile:fileName encoding:NSUTF8StringEncoding error:nil];
				if (![tempstr isEqualToString:@"个人"]) {
					[m_Invoice setM_InvoiceTitle:tempstr];
					DebugLog(@"title is:%@ ",tempstr);
				}
			}
		}else {
			if (![editInvoiceVO.title isEqualToString:@"个人"]) {
				[m_Invoice setM_InvoiceTitle:editInvoiceVO.title];
			}
			[m_Invoice setM_InvoiceContent:editInvoiceVO.content];
			[m_Invoice setM_InvoiceAmount:m_CheckOrderVO.productAmount];
		}
        
        
		[m_Invoice setM_InvoiceType:m_CheckOrderVO.canIssuedInvoiceType];
		DebugLog(@"the invoice type is:%d",[m_CheckOrderVO.canIssuedInvoiceType intValue]);
		if(m_CheckOrderVO.invoiceList!=nil && [m_CheckOrderVO.invoiceList count]>0){
            if (editInvoiceVO!=nil) {
                [editInvoiceVO release];
            }
			editInvoiceVO = [[m_CheckOrderVO.invoiceList objectAtIndex:0] retain];
			if (![editInvoiceVO.title isEqualToString:@"个人"]) {
				[m_Invoice setM_InvoiceTitle:editInvoiceVO.title];
			}
			[m_Invoice setM_InvoiceContent:editInvoiceVO.content];
			[m_Invoice setM_InvoiceAmount:editInvoiceVO.amount];
		}
        
        [self pushVC:m_Invoice animated:YES fullScreen:YES];
	}
}

-(void)productTableViewClicked:(NSInteger)index
{
    if ([self isNeedExpand] && index == [self countOfProductTable] - 3)
    {
        isExpand = !isExpand;
        [self updateCheckOrderForProductTable];
    }
}

-(void)packageProductTableViewClicked:(int)Tableindex Cell:(int)CellIndex
{
    NSString *nindex  = [NSString stringWithFormat:@"%d",Tableindex];
    if ([self isNeedExpand:nindex] && CellIndex == [self countOfPackageProductTable:Tableindex] - 1)
    {
        NSNumber* boolNumber = [self.packGoodisExpand objectForKey:nindex];
        BOOL  packExpand = [boolNumber boolValue];
        packExpand = !packExpand;
        boolNumber = [NSNumber numberWithBool:packExpand];
        [self.packGoodisExpand setObject:boolNumber forKey:nindex];
        [self updateCheckOrderForProductTable];
    }
}


-(void)paymentMethodTableViewClicked
{
    if ([[m_PaymentWayDetailLbl text] isEqualToString:OTS_EMPTY_STR]
        && [m_CheckOrderVO goodReceiver] == nil)
    {
        [self showAlertView:nil alertMsg:@"您目前没有选择送货地址,请先选择您的送货地址!" alertTag:ALERTVIEW_TAG_OTHERS];
    }
    else if ([[m_PaymentWayDetailLbl text] isEqualToString:OTS_EMPTY_STR]
             && m_AddressNotSupport)
    {
        [self showAlertView:nil alertMsg:@"您目前的送货地址不支持任何支付方式,请先确认您的送货地址!" alertTag:ALERTVIEW_TAG_OTHERS];
    }
    else
    {
        [self showChooseBankView];
        /*        UIActionSheet * sheet = [[OTSActionSheet alloc] initWithTitle:nil delegate:self cancelButtonTitle:nil destructiveButtonTitle:nil otherButtonTitles:nil];
         for (PaymentMethodVO *paymentMehtod in m_PaymentMethods)
         {
         if ([paymentMehtod gatewayId]==nil)
         {
         [sheet addButtonWithTitle:[paymentMehtod methodName]];
         }
         }
         
         [sheet addButtonWithTitle:@"取消"];
         [sheet showInView:self.view];
         [sheet showInView:[UIApplication sharedApplication].keyWindow];
         [sheet release];
         sheet = nil;
         */
    }
}


#pragma mark -
-(UITableViewCell *)receiverTableViewCellAtIndex:(NSInteger)index
{
    UITableViewCell *cell=[[[UITableViewCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:nil] autorelease];
    [cell setBackgroundColor:[UIColor whiteColor]];
    if (index==0) {
        //获取送货地址VO
        GoodReceiverVO *goodReciverVO=m_CheckOrderVO.goodReceiver;
        if (goodReciverVO==nil) {//无地址时
            [[cell textLabel] setText:@"请选择收货地址"];
            [[cell textLabel] setTextColor:OTS_FOCUS_COLOR];
            [[cell textLabel] setFont:[UIFont systemFontOfSize:15.0]];
        } else {
            double yValue=5.0;
            //收货人
            UILabel *label=[[UILabel alloc]initWithFrame:CGRectMake(20,yValue,260,22)];
            [label setText:goodReciverVO.receiveName];
            [label setBackgroundColor:[UIColor clearColor]];
            [label setTextColor:[UIColor blackColor]];
            [label setFont:[UIFont systemFontOfSize:15.0]];
            [cell addSubview:label];
            [label release];
            yValue+=22.0;
            //送货地址
            label=[[UILabel alloc]initWithFrame:CGRectMake(20,yValue,260,22)];
            [label setText:goodReciverVO.address1];
            [label setBackgroundColor:[UIColor clearColor]];
            [label setTextColor:[UIColor blackColor]];
            [label setFont:[UIFont systemFontOfSize:15.0]];
            [cell addSubview:label];
            [label release];
            yValue+=22.0;
            //省份、城市、地区
            label=[[UILabel alloc]initWithFrame:CGRectMake(20,yValue,260,22)];
            if ([goodReciverVO.provinceName isEqualToString:@"上海"]) {//上海只显示两级区域
                [label setText:[NSString stringWithFormat:@"%@ %@",goodReciverVO.provinceName,goodReciverVO.cityName]];
            } else {
                [label setText:[NSString stringWithFormat:@"%@ %@ %@",goodReciverVO.provinceName, goodReciverVO.cityName,goodReciverVO.countyName]];
            }
            [label setBackgroundColor:[UIColor clearColor]];
            [label setTextColor:[UIColor blackColor]];
            [label setFont:[UIFont systemFontOfSize:15.0]];
            [cell addSubview:label];
            [label release];
            yValue+=22.0;
            //获取手机信息
            if (goodReciverVO.receiverMobile!=nil) {
                label=[[UILabel alloc]initWithFrame:CGRectMake(20,yValue,260,22)];
                [label setText:goodReciverVO.receiverMobile];
                [label setBackgroundColor:[UIColor clearColor]];
                [label setTextColor:[UIColor blackColor]];
                [label setFont:[UIFont systemFontOfSize:15.0]];
                [cell addSubview:label];
                [label release];
                yValue+=22.0;
            }
            //获取电话信息
            if (goodReciverVO.receiverPhone!=nil) {
                label=[[UILabel alloc]initWithFrame:CGRectMake(20,yValue,260,22)];
                [label setText:goodReciverVO.receiverPhone];
                [label setBackgroundColor:[UIColor clearColor]];
                [label setTextColor:[UIColor blackColor]];
                [label setFont:[UIFont systemFontOfSize:15.0]];
                [cell addSubview:label];
                [label release];
            }
        }
        cell.selectionStyle=UITableViewCellSelectionStyleBlue;
        cell.accessoryType=UITableViewCellAccessoryDisclosureIndicator;
    }
    /*
    else if (index==1) {
        [[cell textLabel] setText:[NSString stringWithFormat:@"送货方式：%@",m_CheckOrderVO.deliveryMethodForString]];
        [[cell textLabel] setFont:[UIFont systemFontOfSize:15.0]];
        cell.selectionStyle=UITableViewCellSelectionStyleNone;
        cell.accessoryType=UITableViewCellAccessoryNone;
    } else if (index==2) {
        if ([m_CheckOrderVO expectReceiveDateTo]==nil) {
            NSDate *tomorrow=[NSDate dateWithTimeIntervalSinceNow:(24*60*60)];
            NSCalendar *calendar=[[NSCalendar alloc] initWithCalendarIdentifier:NSGregorianCalendar];
            NSDateComponents *comps=[calendar components:NSYearCalendarUnit|NSMonthCalendarUnit|NSDayCalendarUnit  fromDate:tomorrow];
            [[cell textLabel] setText:[NSString stringWithFormat:@"预计到货时间：%d-%d-%d",[comps year],[comps month],[comps day]]];
            [calendar release];
        } else {
            NSString *text=nil;
            if ([m_CheckOrderVO.expectReceiveDateTo length]>=10) {
                text=[m_CheckOrderVO.expectReceiveDateTo substringWithRange:NSMakeRange(0, 10)];
            } else {
                text=m_CheckOrderVO.expectReceiveDateTo;
            }
            [[cell textLabel] setText:[NSString stringWithFormat:@"预计到货时间：%@",text]];
        }
        [[cell textLabel] setFont:[UIFont systemFontOfSize:15.0]];
        cell.selectionStyle=UITableViewCellSelectionStyleNone;
        cell.accessoryType=UITableViewCellAccessoryNone;
    } else if(index==3){
        [[cell textLabel] setText:[NSString stringWithFormat:@"运费(%.2fkg)：",[m_CheckOrderVO.orderTotalWeight doubleValue]]];
        NSString*amount=[NSString stringWithFormat:@"￥%.2f",[m_CheckOrderVO.deliveryAmount doubleValue]];
        UILabel*amount_l=[[UILabel alloc] initWithFrame:CGRectMake(110, 0, 60, 44)];
        amount_l.backgroundColor=[UIColor clearColor];
        amount_l.font=[UIFont systemFontOfSize:15.0];
        amount_l.text=amount;
        amount_l.textAlignment=UITextAlignmentLeft;
        [cell.contentView addSubview:amount_l];
        [amount_l release];
        
        //        UILabel* amountReg=[[UILabel alloc] initWithFrame:CGRectMake(170, 0, 100, 44)];
        //        amountReg.text=@"查看运费规则";
        //        amountReg.font=[UIFont systemFontOfSize:15.0];
        //        amountReg.textAlignment=UITextAlignmentRight;
        //        amountReg.backgroundColor=[UIColor clearColor];
        //        [cell.contentView addSubview:amountReg];
        //        [amountReg release];
        
        [[cell textLabel] setFont:[UIFont systemFontOfSize:15.0]];
        cell.selectionStyle=UITableViewCellSelectionStyleNone;
        //        cell.accessoryType=UITableViewCellAccessoryDisclosureIndicator;
    }
     */
    return cell;
}

-(void)showProductInfoOnCell:(UITableViewCell *)cell withOrderItem:(OrderItemVO*)orderItemV2
{
    if (orderItemV2 == nil)
    {
        return;
    }
    ProductVO * aProduct = [orderItemV2 product];
    
    //商品名称
    UILabel *label=[[UILabel alloc] initWithFrame:CGRectMake(20, 0, 220, 40)];
    [label setNumberOfLines:1];
    [label setBackgroundColor:[UIColor clearColor]];
    [label setText:[aProduct cnName]];
    [label setFont:[UIFont systemFontOfSize:14.0]];
    [cell addSubview:label];
    [label release];
    
    //单价
    double price=[aProduct.price doubleValue];
    label=[[UILabel alloc] initWithFrame:CGRectMake(100, 26, 200, 20)];
    [label setBackgroundColor:[UIColor clearColor]];
    if ([aProduct.activitypoint intValue]) {
        [label setText:[NSString stringWithFormat:@"单价:%@积分+￥%.2f",aProduct.activitypoint,price]];
    }else{
        [label setText:[NSString stringWithFormat:@"单价:￥%.2f",price]];
    }
    [label setFont:[UIFont systemFontOfSize:14.0]];
    [label setTextAlignment:UITextAlignmentRight];
    [cell addSubview:label];
    [label release];
    
    //数量
    label=[[UILabel alloc] initWithFrame:CGRectMake(240, 5, 60, 20)];
    [label setBackgroundColor:[UIColor clearColor]];
    int buyquantity = [[orderItemV2 buyQuantity] intValue];
    [label setText:[NSString stringWithFormat:@"x%d",buyquantity]];
    [label setFont:[UIFont systemFontOfSize:15.0]];
    [label setTextColor:[UIColor colorWithRed:204.0/255.0 green:0.0 blue:0.0 alpha:1.0]];
    [label setTextAlignment:UITextAlignmentRight];
    [cell addSubview:label];
    [label release];
    
//    label=[[UILabel alloc] initWithFrame:CGRectMake(260, 26, 60, 20)];
//    [label setBackgroundColor:[UIColor clearColor]];
//    [label setText:[NSString stringWithFormat:@"%@积分",aProduct.activitypoint]];
//    [label setFont:[UIFont systemFontOfSize:15.0]];
//    [label setTextColor:[UIColor colorWithRed:204.0/255.0 green:0.0 blue:0.0 alpha:1.0]];
//    [label setTextAlignment:UITextAlignmentRight];
//    [cell addSubview:label];
//    [label release];

    if (aProduct.isGiftProduct)
    {
        UILabel *giftLabel= [[[UILabel alloc] initWithFrame:CGRectMake(11, 55, 38, 16)] autorelease];
        giftLabel.text=@"赠品";
        giftLabel.adjustsFontSizeToFitWidth=YES;
        giftLabel.font=[UIFont systemFontOfSize:14];
        giftLabel.textColor=[UIColor whiteColor];
        giftLabel.textAlignment=UITextAlignmentCenter;
        giftLabel.backgroundColor=[UIColor colorWithRed:0.686 green:0.078 blue:0.01 alpha:1];
        
        [cell.contentView addSubview:giftLabel];
    }
    
    else if (aProduct.isJoinRedemption)
    {
        UILabel *promotionLab = [[[UILabel alloc] initWithFrame:CGRectMake(11, 55, 38, 16)] autorelease];
        promotionLab.text=@"换购";
        promotionLab.adjustsFontSizeToFitWidth=YES;
        promotionLab.font=[UIFont systemFontOfSize:14];
        promotionLab.textColor=[UIColor whiteColor];
        promotionLab.textAlignment=UITextAlignmentCenter;
        promotionLab.backgroundColor=[UIColor colorWithRed:0.863 green:0.408 blue:0.01 alpha:0.8];
        
        [cell.contentView addSubview:promotionLab];
    }
}

-(void)showProductInfoOnCell:(UITableViewCell *)cell withProduct:(ProductVO*)aProduct
{
    if (aProduct == nil)
    {
        return;
    }
    
    //商品图片
    //OrderItemVO *orderItemVO=[[m_CheckOrderVO orderItemList] objectAtIndex:index];
    OTSImageView *imageView=[[OTSImageView alloc] initWithFrame:CGRectMake(20, 12, 40, 40)];
    [imageView loadImgUrl:aProduct.miniDefaultProductUrl];
    //    [imageView setImageWithURL:[NSURL URLWithString:aProduct.miniDefaultProductUrl] refreshCache:NO placeholderImage:[UIImage imageNamed:@"defaultimg85.png"]];
    [cell addSubview:imageView];
    [imageView release];
    
    
    //商品名称
    UILabel *label=[[UILabel alloc] initWithFrame:CGRectMake(70, 5, 230, 50)];
    [label setNumberOfLines:2];
    [label setBackgroundColor:[UIColor clearColor]];
    [label setText:[aProduct cnName]];
    [label setFont:[UIFont systemFontOfSize:15.0]];
    [cell addSubview:label];
    [label release];
    
    //数量
    label=[[UILabel alloc] initWithFrame:CGRectMake(70, 60, 90, 20)];
    [label setBackgroundColor:[UIColor clearColor]];
    int buyquantity = [aProduct purchaseAmount];
    [label setText:[NSString stringWithFormat:@"数量：%d",buyquantity]];
    [label setFont:[UIFont systemFontOfSize:15.0]];
    [cell addSubview:label];
    [label release];
    
    //单价
    double price=[aProduct.realPrice doubleValue];
    label=[[UILabel alloc] initWithFrame:CGRectMake(170, 60, 130, 20)];
    [label setBackgroundColor:[UIColor clearColor]];
    [label setText:[NSString stringWithFormat:@"单价：￥%.2f",price]];
    [label setFont:[UIFont systemFontOfSize:15.0]];
    [label setTextAlignment:UITextAlignmentRight];
    [cell addSubview:label];
    [label release];
    
    if (aProduct.activitypoint.intValue) {
        label=[[UILabel alloc] initWithFrame:CGRectMake(170, 85, 130, 20)];
        [label setBackgroundColor:[UIColor clearColor]];
        [label setText:[NSString stringWithFormat:@"+%@积分",aProduct.activitypoint]];
        [label setFont:[UIFont systemFontOfSize:15.0]];
        [label setTextAlignment:UITextAlignmentRight];
        [cell addSubview:label];
        [label release];
    }
    if (aProduct.isGiftProduct)
    {
        UILabel *giftLabel= [[[UILabel alloc] initWithFrame:CGRectMake(11, 55, 38, 16)] autorelease];
        giftLabel.text=@"赠品";
        giftLabel.adjustsFontSizeToFitWidth=YES;
        giftLabel.font=[UIFont systemFontOfSize:14];
        giftLabel.textColor=[UIColor whiteColor];
        giftLabel.textAlignment=UITextAlignmentCenter;
        giftLabel.backgroundColor=[UIColor colorWithRed:0.686 green:0.078 blue:0.01 alpha:1];
        
        [cell.contentView addSubview:giftLabel];
    }
    
    else if (aProduct.isJoinRedemption)
    {
        UILabel *promotionLab = [[[UILabel alloc] initWithFrame:CGRectMake(11, 55, 38, 16)] autorelease];
        promotionLab.text=@"换购";
        promotionLab.adjustsFontSizeToFitWidth=YES;
        promotionLab.font=[UIFont systemFontOfSize:14];
        promotionLab.textColor=[UIColor whiteColor];
        promotionLab.textAlignment=UITextAlignmentCenter;
        promotionLab.backgroundColor=[UIColor colorWithRed:0.863 green:0.408 blue:0.01 alpha:0.8];
        
        [cell.contentView addSubview:promotionLab];
    }
}


-(void)showProductInfoOnCell:(UITableViewCell *)cell index:(NSInteger)index
{
    //商品图片
    OrderItemVO *orderItemVO=[[m_CheckOrderVO orderItemList] objectAtIndex:index];
    OTSImageView *imageView=[[OTSImageView alloc] initWithFrame:CGRectMake(20, 12, 40, 40)];
    [imageView loadImgUrl:orderItemVO.product.miniDefaultProductUrl];
    //    [imageView setImageWithURL:[NSURL URLWithString:orderItemVO.product.miniDefaultProductUrl] refreshCache:NO placeholderImage:[UIImage imageNamed:@"defaultimg85.png"]];
    
    [cell addSubview:imageView];
    [imageView release];
    
    //    //有赠品
    //    UILabel *label=[[UILabel alloc] initWithFrame:CGRectMake(20, 57, 40, 16)];
    //    [label setText:@"有赠品"];
    //    [label setBackgroundColor:[UIColor colorWithRed:204.0/255.0 green:0.0 blue:0.0 alpha:1.0]];
    //    [label setTextColor:[UIColor whiteColor]];
    //    [label setTextAlignment:UITextAlignmentCenter];
    //    [label setFont:[UIFont systemFontOfSize:14.0]];
    //    [label setAdjustsFontSizeToFitWidth:YES];
    //    if ([[[orderItemVO product] hasGift] intValue]==1) {
    //        [cell addSubview:label];
    //    }
    //    [label release];
    
    //商品名称
    UILabel *label=[[UILabel alloc] initWithFrame:CGRectMake(70, 5, 230, 50)];
    [label setNumberOfLines:2];
    [label setBackgroundColor:[UIColor clearColor]];
    [label setText:[[orderItemVO product] cnName]];
    [label setFont:[UIFont systemFontOfSize:15.0]];
    [cell addSubview:label];
    [label release];
    //数量
    label=[[UILabel alloc] initWithFrame:CGRectMake(70, 60, 90, 20)];
    [label setBackgroundColor:[UIColor clearColor]];
    [label setText:[NSString stringWithFormat:@"数量：%@",[orderItemVO buyQuantity]]];
    [label setFont:[UIFont systemFontOfSize:15.0]];
    [cell addSubview:label];
    [label release];
    //单价
    double price=[[[orderItemVO product] price] doubleValue];
    label=[[UILabel alloc] initWithFrame:CGRectMake(170, 60, 130, 20)];
    [label setBackgroundColor:[UIColor clearColor]];
    [label setText:[NSString stringWithFormat:@"单价：￥%.2f",price]];
    [label setFont:[UIFont systemFontOfSize:15.0]];
    [label setTextAlignment:UITextAlignmentRight];
    [cell addSubview:label];
    [label release];
}

-(void)showGiftForProductTableViewCell:(UITableViewCell *)cell
{
    UIImageView *imageView=[[UIImageView alloc] initWithFrame:CGRectMake(10, 0, 300, 2)];
    [imageView setImage:[UIImage imageNamed:@"checkOrder_wave_line.png"]];
    [cell addSubview:imageView];
    [imageView release];
    
    imageView=[[UIImageView alloc] initWithFrame:CGRectMake(10+11, 2, 21, 38)];
    [imageView setImage:[UIImage imageNamed:@"checkOrder_gift.png"]];
    [cell addSubview:imageView];
    [imageView release];
    
    imageView=[[UIImageView alloc] initWithFrame:CGRectMake(50, 15, 7, 13)];
    [imageView setImage:[UIImage imageNamed:@"shopList_left_arrow.png"]];
    [cell addSubview:imageView];
    [imageView release];
    
    imageView=[[UIImageView alloc] initWithFrame:CGRectMake(293, 15, 7, 13)];
    [imageView setImage:[UIImage imageNamed:@"shopList_right_arrow.png"]];
    [cell addSubview:imageView];
    [imageView release];
    
    UIScrollView *scrollView=[[UIScrollView alloc] initWithFrame:CGRectMake(60, 0, 240, 44)];
    double xValue=5.0;
    int i;
    for (i=0; i<[m_UserSelectedGiftArray count]; i++) {
        NSMutableDictionary *mDictionary=[m_UserSelectedGiftArray objectAtIndex:i];
		int productCount=[[mDictionary objectForKey:@"productCount"] intValue];
        int j;
        for (j=0; j<productCount; j++) {
			ProductVO *productVO=[mDictionary valueForKey:@"productVO"];
			OTSImageView *imageView=[[OTSImageView alloc] initWithFrame:CGRectMake(xValue, 2, 40, 40)];
			[imageView.layer setBorderWidth:1.0];
			[imageView.layer setBorderColor:[UIColorFromRGB(0xeeeeee) CGColor]];
            [imageView loadImgUrl:productVO.miniDefaultProductUrl];
            //            [imageView setImageWithURL:[NSURL URLWithString:productVO.miniDefaultProductUrl] refreshCache:NO placeholderImage:[UIImage imageNamed:@"defaultimg55.png"]];
			[scrollView addSubview:imageView];
			[imageView release];
			xValue+=45.0;
		}
    }
    [scrollView setContentSize:CGSizeMake(xValue, 44)];
    [scrollView setBackgroundColor:[UIColor clearColor]];
    [cell addSubview:scrollView];
    [scrollView release];
}

-(ProductVO*)giftAtIndex:(NSUInteger)anIndex
{
    if (anIndex < m_UserSelectedGiftArray.count)
    {
        NSMutableDictionary *dic = [m_UserSelectedGiftArray objectAtIndex:anIndex];
        ProductVO* product = [dic valueForKey:@"productVO"];
        product.purchaseAmount = [[dic objectForKey:@"productCount"] intValue];
        return product;
    }
    
    return nil;
}

-(NSArray*)gifts
{
    int count = m_UserSelectedGiftArray.count;
    
    if (count > 0)
    {
        NSMutableArray *gifts = [NSMutableArray arrayWithCapacity:count];
        for (int i = 0; i < count; i++)
        {
            ProductVO *vo = [self giftAtIndex:i];
            if (vo)
            {
                [gifts addObject:vo];
            }
        }
        
        return gifts;
    }
    
    return nil;
}

-(ProductVO*)goodsAtIndex:(NSUInteger)anIndex
{
    if (anIndex < m_CheckOrderVO.orderItemList.count)
    {
        OrderItemVO *orderItemVO = [m_CheckOrderVO.orderItemList objectAtIndex:anIndex];
        ProductVO *product = orderItemVO.product;
        product.purchaseAmount = [orderItemVO.buyQuantity intValue];
        return product;
    }
    
    return nil;
}

-(NSArray*)goods
{
    int count = m_CheckOrderVO.orderItemList.count;
    
    if (count > 0)
    {
        NSMutableArray *goods = [NSMutableArray arrayWithCapacity:count];
        for (int i = 0; i < count; i++)
        {
            ProductVO *vo = [self goodsAtIndex:i];
            if (vo)
            {
                [goods addObject:vo];
            }
        }
        
        return goods;
    }
    
    return nil;
}

-(NSDictionary *)packgifts
{
    return nil;
}

-(NSDictionary *)packgoods
{
    int count = m_CheckOrderVO.childOrderList.count;
    
    if (count > 0)
    {
        NSMutableDictionary *packgoods = [NSMutableDictionary dictionaryWithCapacity:count];
        for (int i = 0; i < count; i++)
        {
            NSString * nindex = [NSString stringWithFormat:@"%d",i];
            
            OrderV2 *packageV2 = [[m_CheckOrderVO childOrderList] objectAtIndex:i];
            NSMutableArray * packProducts = [NSMutableArray array];
            for (int i=0; i< [packageV2.orderItemList count]; i++) {
                ProductVO *productV2 = [[packageV2.orderItemList objectAtIndex:i] product];
                [packProducts addObject:productV2];
            }
            [packgoods setObject:packProducts forKey:nindex];
        }
        
        return packgoods;
    }
    
    return nil;
}

-(BOOL)isNeedExpand
{
    return self.goodItems.count > 3;
}

-(BOOL)isNeedExpand:(NSString *)nindex
{
    return  [[self.packGoodItems objectForKey:nindex] count] > 1;
}

-(UITableViewCell *)moneyTableViewCellAtIndex:(NSInteger)index
{
    UITableViewCell *cell=[[[UITableViewCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:nil] autorelease];
    [cell setBackgroundColor:[UIColor whiteColor]];
    cell.selectionStyle=UITableViewCellSelectionStyleNone;
    cell.accessoryType=UITableViewCellAccessoryNone;
    if (index==0)
    {
        cell.backgroundColor = OTS_COLOR_FROM_RGB(0xfffeee);
        
        //"商品总金额"label
        UILabel *label=[[UILabel alloc] initWithFrame:CGRectMake(20, 5, 150, 23)];
        [label setText:@"商品总金额："];
        [label setBackgroundColor:[UIColor clearColor]];
        [label setFont:[UIFont systemFontOfSize:15.0]];
        [cell addSubview:label];
        [label release];
        //商品总金额label
        label=[[UILabel alloc] initWithFrame:CGRectMake(180, 5, 120, 23)];
        [label setText:[NSString stringWithFormat:@"￥%.2f",[m_CheckOrderVO.productAmount doubleValue]]];
        [label setBackgroundColor:[UIColor clearColor]];
        [label setFont:[UIFont systemFontOfSize:15.0]];
        [label setTextAlignment:UITextAlignmentRight];
        [cell addSubview:label];
        [label release];
        //"运费"label
        label=[[UILabel alloc] initWithFrame:CGRectMake(20, 28, 150, 23)];
        NSString* strTransferFee = m_CheckOrderVO.orderTotalWeight ? [NSString stringWithFormat:@"运费(%.2fkg)：", [m_CheckOrderVO.orderTotalWeight floatValue]] : @"运费：";
        [label setText:strTransferFee];
        [label setBackgroundColor:[UIColor clearColor]];
        [label setFont:[UIFont systemFontOfSize:15.0]];
        [cell addSubview:label];
        [label release];
        //+
        label=[[UILabel alloc] initWithFrame:CGRectMake(200, 28, 20, 23)];
        [label setText:@"＋"];
        [label setBackgroundColor:[UIColor clearColor]];
        [label setFont:[UIFont systemFontOfSize:14.0]];
        [cell addSubview:label];
        [label release];
        //运费label
        label=[[UILabel alloc] initWithFrame:CGRectMake(180, 28, 120, 23)];
        [label setText:[NSString stringWithFormat:@"￥%.2f",[m_CheckOrderVO.deliveryAmount doubleValue]]];
        [label setBackgroundColor:[UIColor clearColor]];
        [label setFont:[UIFont systemFontOfSize:15.0]];
        [label setTextAlignment:UITextAlignmentRight];
        [cell addSubview:label];
        [label release];
        
        //"账户余额抵扣"label
        label=[[UILabel alloc] initWithFrame:CGRectMake(20, 51, 150, 23)];
        [label setText:@"现金账户余额抵扣："];
        [label setBackgroundColor:[UIColor clearColor]];
        [label setFont:[UIFont systemFontOfSize:15.0]];
        [cell addSubview:label];
        [label release];
        //-
        label=[[UILabel alloc] initWithFrame:CGRectMake(200, 51, 20, 23)];
        [label setText:@"－"];
        [label setBackgroundColor:[UIColor clearColor]];
        [label setFont:[UIFont systemFontOfSize:14.0]];
        [cell addSubview:label];
        [label release];
        
        //账户余额抵扣label
        m_AccountPayLabel=[[UILabel alloc] initWithFrame:CGRectMake(180, 51, 120, 23)];
        [m_AccountPayLabel setText:[NSString stringWithFormat:@"￥%.2f",m_AccountPayMoney]];
        [m_AccountPayLabel setBackgroundColor:[UIColor clearColor]];
        [m_AccountPayLabel setFont:[UIFont systemFontOfSize:15.0]];
        [m_AccountPayLabel setTextAlignment:UITextAlignmentRight];
        [cell addSubview:m_AccountPayLabel];
        [m_AccountPayLabel release];
        
        //"账户余额抵扣"label
        label=[[UILabel alloc] initWithFrame:CGRectMake(20, 74, 150, 23)];
        [label setText:@"礼品卡账户余额抵扣："];
        [label setBackgroundColor:[UIColor clearColor]];
        [label setFont:[UIFont systemFontOfSize:15.0]];
        [cell addSubview:label];
        [label release];
        //-
        label=[[UILabel alloc] initWithFrame:CGRectMake(200, 74, 20, 23)];
        [label setText:@"－"];
        [label setBackgroundColor:[UIColor clearColor]];
        [label setFont:[UIFont systemFontOfSize:14.0]];
        [cell addSubview:label];
        [label release];
        
        //账户余额抵扣label
        m_GiftCardPayLabel=[[UILabel alloc] initWithFrame:CGRectMake(180, 74, 120, 23)];
        [m_GiftCardPayLabel setText:[NSString stringWithFormat:@"￥%.2f",m_GiftCardPayMoney]];
        [m_GiftCardPayLabel setBackgroundColor:[UIColor clearColor]];
        [m_GiftCardPayLabel setFont:[UIFont systemFontOfSize:15.0]];
        [m_GiftCardPayLabel setTextAlignment:UITextAlignmentRight];
        [cell addSubview:m_GiftCardPayLabel];
        [m_GiftCardPayLabel release];
        
        float offsetcash = 74;
        
        //        if ([[m_Mycoupon amount] doubleValue]>0.0) {
        offsetcash += 25;
        //"抵用券抵扣"label
        label=[[UILabel alloc] initWithFrame:CGRectMake(20, offsetcash, 150, 23)];
        [label setText:@"抵用券抵扣："];
        [label setBackgroundColor:[UIColor clearColor]];
        [label setFont:[UIFont systemFontOfSize:15.0]];
        [cell addSubview:label];
        [label release];
        //-
        label=[[UILabel alloc] initWithFrame:CGRectMake(200, offsetcash, 20, 23)];
        [label setText:@"－"];
        [label setBackgroundColor:[UIColor clearColor]];
        [label setFont:[UIFont systemFontOfSize:14.0]];
        [cell addSubview:label];
        [label release];
        //抵用券抵扣label
        m_UseCouponLabel=[[UILabel alloc] initWithFrame:CGRectMake(180, offsetcash, 120, 23)];
        [m_UseCouponLabel setText:[NSString stringWithFormat:@"￥%.2f",m_UseCouponMoney]];
        [m_UseCouponLabel setBackgroundColor:[UIColor clearColor]];
        [m_UseCouponLabel setFont:[UIFont systemFontOfSize:15.0]];
        [m_UseCouponLabel setTextAlignment:UITextAlignmentRight];
        [cell addSubview:m_UseCouponLabel];
        [m_UseCouponLabel release];
        //        }
        //        if ([m_CheckOrderVO.cashAmount doubleValue]>0.0) {
        offsetcash += 25;
        //"促销活动立减"label
        label=[[UILabel alloc] initWithFrame:CGRectMake(20, offsetcash, 150, 23)];
        [label setText:@"促销活动立减："];
        [label setBackgroundColor:[UIColor clearColor]];
        [label setFont:[UIFont systemFontOfSize:15.0]];
        [cell addSubview:label];
        [label release];
        //-
        label=[[UILabel alloc] initWithFrame:CGRectMake(200, offsetcash, 20, 23)];
        [label setText:@"－"];
        [label setBackgroundColor:[UIColor clearColor]];
        [label setFont:[UIFont systemFontOfSize:14.0]];
        [cell addSubview:label];
        [label release];
        
        //促销活动立减 金额
        m_FullDiscoun=[[UILabel alloc] initWithFrame:CGRectMake(180, offsetcash, 120, 23)];
        [m_FullDiscoun setText:[NSString stringWithFormat:@"￥%.2f",[m_CheckOrderVO.cashAmount doubleValue]]];
        [m_FullDiscoun setBackgroundColor:[UIColor clearColor]];
        [m_FullDiscoun setFont:[UIFont systemFontOfSize:15.0]];
        [m_FullDiscoun setTextAlignment:UITextAlignmentRight];
        [cell addSubview:m_FullDiscoun];
        [m_FullDiscoun release];
        //        }
        
        offsetcash += 25;

        UILabel* coin=[[UILabel alloc] initWithFrame:CGRectMake(20, offsetcash, 150, 23)];
        coin.text=@"积分使用：";
        coin.backgroundColor=[UIColor clearColor];
        coin.font=[UIFont systemFontOfSize:15.0];
        [cell addSubview:coin];
        [coin release];

        UILabel*integralLab=[[UILabel alloc] initWithFrame:CGRectMake(180, offsetcash, 120, 23)];
        [integralLab setText:[NSString stringWithFormat:@"%@积分",m_CheckOrderVO.needPoint]];
        [integralLab setBackgroundColor:[UIColor clearColor]];
        [integralLab setFont:[UIFont systemFontOfSize:15.0]];
        [integralLab setTextAlignment:UITextAlignmentRight];
        [cell addSubview:integralLab];
        [integralLab release];

    } else if (index==1) {
        
        
        //"还需支付"label
        UILabel *label=[[UILabel alloc] initWithFrame:CGRectMake(20, 0, 150, 44)];
        [label setText:@"还需支付："];
        [label setBackgroundColor:[UIColor clearColor]];
        [label setFont:[UIFont systemFontOfSize:15.0]];
        [cell addSubview:label];
        [label release];
        
        //应付总金额label
        double needPayMoney=[m_CheckOrderVO.productAmount doubleValue]+[m_CheckOrderVO.deliveryAmount doubleValue]-m_AccountPayMoney-m_UseCouponMoney-[m_CheckOrderVO.cashAmount doubleValue]-m_GiftCardPayMoney;
        m_NeedPayMoneyLabel=[[UILabel alloc] initWithFrame:CGRectMake(180, 0, 120, 44)];
        if (needPayMoney > 0) {
            [m_NeedPayMoneyLabel setText:[NSString stringWithFormat:@"￥%.2f",needPayMoney]];
        }else{
            [m_NeedPayMoneyLabel setText:@"￥0.00"];
        }
        
        [m_NeedPayMoneyLabel setTextColor:[UIColor redColor]];
        [m_NeedPayMoneyLabel setBackgroundColor:[UIColor clearColor]];
        [m_NeedPayMoneyLabel setFont:[UIFont boldSystemFontOfSize:16.0]];
        [m_NeedPayMoneyLabel setTextAlignment:UITextAlignmentRight];
        [cell addSubview:m_NeedPayMoneyLabel];
        [m_NeedPayMoneyLabel release];
        //cell.backgroundColor = [UIColor blueColor];
    }
    return cell;
}

-(UITableViewCell *)productTableViewCellAtIndex:(NSInteger)index
{
    UITableViewCell *cell=[[[UITableViewCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:nil] autorelease];
    [cell setBackgroundColor:[UIColor whiteColor]];
    cell.selectionStyle=UITableViewCellSelectionStyleNone;
    cell.accessoryType=UITableViewCellAccessoryNone;
    
    int totalQuantity = 0;
    
    for (ProductVO *product in self.goodItems)
    {
        totalQuantity += product.purchaseAmount;
    }
    
    //    for (OrderItemVO* item in [m_CheckOrderVO orderItemList]) {
    //        if (item) {
    //            totalQuantity+=[item.buyQuantity intValue];
    //        }
    //    }
    
    int count = [self countOfProductTable];
    
    ProductVO *product = nil;
    if (index < count - 2)
    {
        if ([self isNeedExpand] && index == count - 3)
        {
            if (!isExpand)
            {
                [[cell textLabel] setText:[NSString stringWithFormat:@"共%d件，查看更多▼",totalQuantity]];
            }
            else
            {
                [[cell textLabel] setText:[NSString stringWithFormat:@"共%d件，收起更多▲",totalQuantity]];
            }
            
            [[cell textLabel] setFont:[UIFont systemFontOfSize:15.0]];
            [[cell textLabel] setTextAlignment:UITextAlignmentCenter];
            cell.selectionStyle = UITableViewCellSelectionStyleBlue;
        }
        else
        {
            product = [self.goodItems objectAtIndex:index];
        }
    }
    
    else if (index == count - 2)
    {
        cell = [self moneyTableViewCellAtIndex:0];
    }
    
    else
    {
        cell = [self moneyTableViewCellAtIndex:1];
    }
    
    [self showProductInfoOnCell:cell withProduct:product];
    
    //[self showProductInfoOnCell:cell index:index];
    
#if 0
    if (count<=3) {
        if (index<count) {//商品信息
            [self showProductInfoOnCell:cell index:index];
        }
        else if(index==count) //赠品
        {
            if (m_UserSelectedGiftArray!=nil&&m_UserSelectedGiftArray.count) {
                [self showGiftForProductTableViewCell:cell];
            }else {
                cell=[self moneyTableViewCellAtIndex:0];
            }
        }else if(index==count+1){
            if (m_UserSelectedGiftArray!=nil&&m_UserSelectedGiftArray.count) {
                cell= [self moneyTableViewCellAtIndex:0];
            }else {
                cell= [self moneyTableViewCellAtIndex:1];
            }
        }else {
            cell=[self moneyTableViewCellAtIndex:1];
        }
    } else if (count>3 && !m_ShowAllProduct) {
        if (index<3) {//商品信息
            [self showProductInfoOnCell:cell index:index];
        }
        else if (index==3) {////统计信息 查看更多
            [[cell textLabel] setText:[NSString stringWithFormat:@"共%d件，查看更多▼",totalQuantity]];
            [[cell textLabel] setFont:[UIFont systemFontOfSize:15.0]];
            [[cell textLabel] setTextAlignment:UITextAlignmentCenter];
        }
        else if (index==4) {//赠品
            if (m_UserSelectedGiftArray!=nil&&m_UserSelectedGiftArray.count) {
                [self showGiftForProductTableViewCell:cell];
            }else {
                cell=[self moneyTableViewCellAtIndex:0];
            }
        }else if (index==5) {
            if (m_UserSelectedGiftArray!=nil&&m_UserSelectedGiftArray.count) {
                cell= [self moneyTableViewCellAtIndex:0];
            }else {
                cell=[self moneyTableViewCellAtIndex:1];
            }
        }else if (index==6) {
            cell=[self moneyTableViewCellAtIndex:1];
        }
    } else {
        if (index<count) {//商品信息
            [self showProductInfoOnCell:cell index:index];
        }
        else if (index==count) { //统计信息 收起更多
            [[cell textLabel] setText:[NSString stringWithFormat:@"共%d件，收起更多▲",totalQuantity]];
            [[cell textLabel] setFont:[UIFont systemFontOfSize:15.0]];
            [[cell textLabel] setTextAlignment:UITextAlignmentCenter];
        }
        else if(index == count+1){//赠品
            if (m_UserSelectedGiftArray!=nil&&m_UserSelectedGiftArray.count) {
                [self showGiftForProductTableViewCell:cell];
            }else {
                cell=[self moneyTableViewCellAtIndex:0];
            }
        }else if (index==count+2) {
            if (m_UserSelectedGiftArray!=nil&&m_UserSelectedGiftArray.count) {
                cell=[self moneyTableViewCellAtIndex:0];
            }else {
                cell=[self moneyTableViewCellAtIndex:1];
            }
        }else {
            cell= [self moneyTableViewCellAtIndex:1];
        }
    }
#endif
    
    return cell;
}

-(UITableViewCell*)cellWithStyle:(UITableViewCellStyle)aCellStype
{
    UITableViewCell *cell=[[[UITableViewCell alloc] initWithStyle:aCellStype reuseIdentifier:nil] autorelease];
    [cell setBackgroundColor:[UIColor whiteColor]];
    
    return cell;
}

-(UITableViewCell *)paymentTableViewCellAtIndex:(NSInteger)index
{
    UITableViewCell *cell = [self cellWithStyle:UITableViewCellStyleValue1];
    
    if (index == 0)
    {
        [self decorateCell:cell type:EOtsCoCellPaymentWay];
    }
    
    else if (index == 1)
    {
        [self decorateCell:cell type:EOtsCoCellCoupOn];
    }
    else if (index == 2){
        [self decorateCell:cell type:EOtsCoCellGiftCardPay];
    }
    else if (index == 3)
    {
        [self decorateCell:cell type:EOtsCoCellBalancePay];
    }
    
    return cell;
}

-(UITableViewCell *)packageTableViewCellAtIndexPath:(NSIndexPath *)indexPath iN:(UITableView *)tableView
{
    UITableViewCell *cell = [self cellWithStyle:UITableViewCellStyleValue1];
    
    // table 的索引
    int index=[tableView tag]-100;
    
    // table 之下每个cell的索引  两级结构
    int cellindex = [indexPath row];
    NSString *nindex  = [NSString stringWithFormat:@"%d",index];
    
    int cellcount = [self countOfPackageProductTable:index];
    OrderV2 *packageV2=[[m_CheckOrderVO childOrderList] objectAtIndex:index];
    
    int totalQuantity = 0;
    for (int i=0; i< [packageV2.orderItemList count]; i++)
    {
        OrderItemVO *orderItemVO = [packageV2.orderItemList objectAtIndex:i];
        totalQuantity += [orderItemVO.buyQuantity intValue];
    }
    
    if (cellindex == 0) {
        [[cell textLabel] setText:[NSString stringWithFormat:@"包裹%d",index+1]];
        [[cell textLabel] setFont:[UIFont systemFontOfSize:15.0]];
        [[cell textLabel] setTextColor:[UIColor colorWithRed:204.0/255.0 green:0.0 blue:0.0 alpha:1.0]];
        NSMutableArray * packProducts = [self.packGoodItems objectForKey:nindex];
        ProductVO * firstProduct = [packProducts objectAtIndex:0];
        if ([firstProduct.isFresh intValue]==1) {
        [[cell detailTextLabel] setText:[NSString stringWithFormat:@"生鲜商品收货后48小时内可以退换货"]];
        [[cell detailTextLabel] setFont:[UIFont systemFontOfSize:12.0]];
        [[cell detailTextLabel] setTextColor:UIColorFromRGB(0x999999)];
        }
    }
    else if(cellindex < cellcount)
    {
        if ([self isNeedExpand:nindex] && cellindex == cellcount - 1)
        {                      if (![[self.packGoodisExpand objectForKey:nindex] intValue])
        {
            [[cell textLabel] setText:[NSString stringWithFormat:@"                    共%d件，查看更多▼",totalQuantity]];
        }
        else
        {
            [[cell textLabel] setText:[NSString stringWithFormat:@"                    共%d件，收起更多▲",totalQuantity]];
        }
            
            [[cell textLabel] setFont:[UIFont systemFontOfSize:15.0]];
            [[cell textLabel] setTextAlignment:UITextAlignmentCenter];
            cell.selectionStyle = UITableViewCellSelectionStyleBlue;
        }
        else
        {
            OrderItemVO *orderItemV2 = [packageV2.orderItemList objectAtIndex:cellindex-1];
            [self showProductInfoOnCell:cell withOrderItem:orderItemV2];
        }
    }
    
    return cell;
}


-(UITableViewCell*)decorateCell:(UITableViewCell*)aCell type:(KOtsCheckOrderCellType)aType
{
    switch (aType)
    {
        case EOtsCoCellInvoice:
        {
            //需要发票
            aCell.textLabel.text = @"需要发票";
            aCell.textLabel.textColor = [UIColor blackColor];
            aCell.textLabel.font = [UIFont systemFontOfSize:15.0f];
            
            //是否需要发票
            m_InvoiceLabel = aCell.detailTextLabel;
            m_InvoiceLabel.font = [UIFont systemFontOfSize:15.0];
            m_InvoiceLabel.text = editInvoiceVO ? editInvoiceVO.title : @"否";
            
            aCell.selectionStyle = UITableViewCellSelectionStyleBlue;
            aCell.accessoryType = UITableViewCellAccessoryDisclosureIndicator;
        }
            break;
            
        case EOtsCoCellCoupOn:
        {
            [[aCell textLabel] setText:@"使用抵用券"];
            [[aCell textLabel] setTextColor:[UIColor blackColor]];
            [[aCell textLabel] setFont:[UIFont systemFontOfSize:15.0]];
            //可用抵用券余额
            if ([m_CheckOrderVO.couponAmount doubleValue]>0.0) {
                OTSBadgeButton *aCpBtn=[[OTSBadgeButton alloc] initWithFrame:CGRectMake(235, 10, 42, 24) badgeNumber:[m_CheckOrderVO.couponAmount intValue]];
                [aCpBtn setBgImg:[UIImage imageNamed:@"couponBG"]];
                [aCell addSubview:aCpBtn];
                [aCpBtn release];
            } else {
                [[aCell detailTextLabel] setText:@"否"];
            }
            [[aCell detailTextLabel]setFont:[UIFont systemFontOfSize:15.0]];
            aCell.selectionStyle=UITableViewCellSelectionStyleBlue;
            aCell.accessoryType=UITableViewCellAccessoryDisclosureIndicator;
        }
            break;
            
        case EOtsCoCellBalancePay:
        {
            aCell.textLabel.text = @"使用现金账户余额";
            aCell.textLabel.textColor = [UIColor blackColor];
            aCell.textLabel.font = [UIFont systemFontOfSize:15.0f];
            
            //账户余额支付
            m_NeedAccountPayLabel = aCell.detailTextLabel;
            [m_NeedAccountPayLabel setFont:[UIFont systemFontOfSize:15.0]];
            m_NeedAccountPayLabel.text = m_AccountPayMoney > 0.0 ? [NSString stringWithFormat:@"￥%.2f",m_AccountPayMoney] : @"否";
            
            aCell.selectionStyle=UITableViewCellSelectionStyleBlue;
            aCell.accessoryType=UITableViewCellAccessoryDisclosureIndicator;
        }
            break;
            
        case EOtsCoCellGiftCardPay:
        {
            aCell.textLabel.text = @"使用礼品卡账户余额";
            aCell.textLabel.textColor = [UIColor blackColor];
            aCell.textLabel.font = [UIFont systemFontOfSize:15.0f];
            
            //账户余额支付
            m_cardPayLabel = aCell.detailTextLabel;
            [m_cardPayLabel setFont:[UIFont systemFontOfSize:15.0]];
            m_cardPayLabel.text = m_GiftCardPayMoney > 0.0 ? [NSString stringWithFormat:@"￥%.2f",m_GiftCardPayMoney] : @"否";
            
            aCell.selectionStyle=UITableViewCellSelectionStyleBlue;
            aCell.accessoryType=UITableViewCellAccessoryDisclosureIndicator;
        }
            break;
            
        case EOtsCoCellPaymentWay:
        {
            //请选择付款方式
            aCell.textLabel.text = @"请选择付款方式";
            aCell.textLabel.textColor = OTS_FOCUS_COLOR;
            aCell.textLabel.tag = TAG_PAYMENT_CELL_LABEL;
            aCell.textLabel.font = [UIFont systemFontOfSize:15.0f];
            m_PaymentWayLbl = aCell.textLabel;
            
            //付款方式
            m_PaymentWayDetailLbl = [aCell detailTextLabel];
            [m_PaymentWayDetailLbl setFont:[UIFont systemFontOfSize:15.0]];
            
            
            if ([m_CheckOrderVO goodReceiver] == nil)
            {//无收货地址
                self.m_PayMethodStr = OTS_EMPTY_STR;
                gatewayType=-1;
                aCell.selectionStyle=UITableViewCellSelectionStyleNone;
                aCell.accessoryType=UITableViewCellAccessoryNone;
            }
            else
            {//有收货地址
                // 需额外传入goodReceiverId
                JSTrackingPrama* prama = [[[JSTrackingPrama alloc]initWithJSType:EJStracking_SaveReciveToOrder extraPrama:[m_CheckOrderVO goodReceiver].nid, nil]autorelease];
                [DoTracking doJsTrackingWithParma:prama];
                
                if ([m_PaymentMethods count] == 0)
                {
                    m_AddressNotSupport = YES;
                    self.m_PayMethodStr = OTS_EMPTY_STR;
                    gatewayType=-1;
                    aCell.selectionStyle = UITableViewCellSelectionStyleNone;
                    aCell.accessoryType = UITableViewCellAccessoryNone;
                }
                else
                {
                    m_AddressNotSupport = NO;
                    bool hasDefaultPaymentMethod = NO;
                    PaymentMethodVO *paymentMethod = nil;
                    
                    for (paymentMethod in m_PaymentMethods)
                    {
                        NSString *isDefaultPaymentMethod = [paymentMethod isDefaultPaymentMethod];
                        
                        if ([isDefaultPaymentMethod isEqualToString:@"true"])
                        {//有默认的付款方式
                            hasDefaultPaymentMethod = YES;
                            methodID = [paymentMethod.methodId intValue];
                            paymentType = [paymentMethod.paymentType intValue];
                            self.m_PayMethodStr = paymentMethod.methodName;
                            gatewayType = paymentMethod.gatewayId ? [paymentMethod.gatewayId intValue] : gatewayType;
                            break;
                        }
                    }
                    
                    if (!hasDefaultPaymentMethod)
                    {
                        self.m_PayMethodStr = OTS_EMPTY_STR;
                        gatewayType=-1;
                    }
                }
            }
            
            [m_PaymentWayDetailLbl setText:m_PayMethodStr];
            [self updatePaymentLabelScrollIfFocus:NO];
            aCell.selectionStyle=UITableViewCellSelectionStyleBlue;
            aCell.accessoryType=UITableViewCellAccessoryDisclosureIndicator;
        }
            break;
            
        default:
            break;
    }
    
    return aCell;
}

-(void)updatePaymentLabelScrollIfFocus:(BOOL)aScrollIfFocus
{
    if ([m_PaymentWayDetailLbl.text isEqualToString:OTS_EMPTY_STR])
    {
        m_PaymentWayLbl.textColor = OTS_FOCUS_COLOR;
        if (aScrollIfFocus)
        {
            // TODO:scroll to position of the label
        }
    }
    else
    {
        m_PaymentWayLbl.textColor = OTS_NORMAL_COLOR;
    }
}


#pragma mark -

-(NSUInteger)countOfProductTable
{
    int count = self.goodItems.count;
    
    if ([self isNeedExpand])
    {
        if (!isExpand)
        {
            count = 3;
        }
        
        count++;    // ‰º∏Áº©ÊåâÈíÆ
    }
    
    count += 2;     // ‰ª∑Ê†º‰ø°ÊÅØ
    return count;
}

-(NSUInteger)countOfPackageProductTable:(int)index
{
    NSString * nindex = [NSString stringWithFormat:@"%d",index];
    int count = [[self.packGoodItems objectForKey:nindex] count];
    
    if ([self isNeedExpand:nindex])
    {
        if (![[self.packGoodisExpand objectForKey:nindex] intValue])
        {
            count = 1;
        }
        
        count++;    // 伸缩按钮
    }
    
    //包裹头子
    count ++;
    return count;
}

-(int) packcountOfchildlist:(NSUInteger)packageIndex
{
    OrderV2 *packageV2 = [[m_CheckOrderVO childOrderList] objectAtIndex:packageIndex];
    int packCount = [[packageV2 orderItemList] count];
    return packCount;
}


-(CGFloat)heightForMoneyFristRow{
    //满减 和 赠品 的坐标偏移
    float OffsetY= 130+25.0+20;
    //    if ([[m_Mycoupon amount] doubleValue]>0.0) {
    //        OffsetY+= 25.0;
    //    }
    //    if ([m_CheckOrderVO.cashAmount doubleValue]>0.0) {
    //        OffsetY+=25.0;
    //    }
    return OffsetY;
}
//设置行按钮样式
-(void)tableView:(UITableView *)tableView accessoryButtonTappedForRowWithIndexPath:(NSIndexPath *)indexPath{
}

#pragma mark alertview相关delegate
- (void)alertView:(UIAlertView *)alertView didDismissWithButtonIndex:(NSInteger)buttonIndex {
	[[GlobalValue getGlobalValueInstance] setHaveAlertViewInShow:NO];
}

#pragma mark actionsheet相关delegate
- (void)actionSheet:(UIActionSheet *)actionSheet didDismissWithButtonIndex:(NSInteger)buttonIndex
{
	NSMutableArray *mArray=[[NSMutableArray alloc] init];
    for (PaymentMethodVO *paymentMehtod in m_PaymentMethods)
    {
        if ([paymentMehtod gatewayId]==nil)
        {
            [mArray addObject:paymentMehtod];
        }
    }
    
    NSString *buttonTitle=[actionSheet buttonTitleAtIndex:buttonIndex];
    NSString *labelStr=[m_PaymentWayDetailLbl text];
    
    if ([buttonTitle isEqualToString:@"取消"]
        || [buttonTitle isEqualToString:labelStr])
    {
        [mArray release];
        return;
    }
    else if ([buttonTitle isEqualToString:GOODS_PAY_ONLINE])
    {
        methodID = [[[mArray objectAtIndex:buttonIndex] methodId] intValue];
        //gatewayType = [[[mArray objectAtIndex:buttonIndex] gatewayId] intValue];
        //选择银行
        [self showChooseBankView];
    }
    else
    {
        if ([buttonTitle isEqualToString:GOODS_TO_PAY])
        {
            paymentType = 2;
            
        }
        else if ([buttonTitle isEqualToString:GOODS_TO_CARD])
        {
            paymentType = 3;
        }
        
        self.m_PayMethodStr = [[mArray objectAtIndex:buttonIndex] methodName];
        methodID = [[[mArray objectAtIndex:buttonIndex] methodId] intValue];
        gatewayType = [[[mArray objectAtIndex:buttonIndex] gatewayId] intValue];
        
        m_ThreadState = THREAD_STATUS_SAVE_PAYMENT_ONLY;
        [self setUpThread:YES];
    }
    
    [mArray release];
}

#pragma mark 过滤赠品
-(OrderVO*) filterGifts:(OrderVO *) ordervo
{
    NSMutableArray *copyItemList = [[NSMutableArray alloc] init];
    NSMutableArray * orderItemList = [ordervo orderItemList];
    for (OrderItemVO* item in orderItemList)
    {
        if ([[[item product] isGift] intValue] == 0)
        {
            [copyItemList addObject:item];
            
        }
    }
    [ordervo setOrderItemList:copyItemList];
    [copyItemList release];
    return ordervo;
}

- (void)didReceiveMemoryWarning {
    [super didReceiveMemoryWarning];
}


#pragma mark -
-(void)releaseMyResoures
{
    [[NSNotificationCenter defaultCenter] removeObserver:self];
    
    OTS_SAFE_RELEASE(m_CheckOrderVO);
    //OTS_SAFE_RELEASE(m_GoodReceiver);
    //OTS_SAFE_RELEASE(m_EditGoodsReceiver);
    
    OTS_SAFE_RELEASE(m_Invoice);
    OTS_SAFE_RELEASE(m_OrderService);
    //OTS_SAFE_RELEASE(m_MyOrder);
    //OTS_SAFE_RELEASE(m_ShareOrder);
    OTS_SAFE_RELEASE(m_Mycoupon);
    
    //OTS_SAFE_RELEASE(m_AccountBalance);
    OTS_SAFE_RELEASE(m_PayMethodStr);
    OTS_SAFE_RELEASE(m_PaymentMethods);
    OTS_SAFE_RELEASE(m_UserSelectedGiftArray);
    //OTS_SAFE_RELEASE(secValidateVC);
    
    // release outlet
    OTS_SAFE_RELEASE(m_ScrollView);
    OTS_SAFE_RELEASE(distributionArray);
    OTS_SAFE_RELEASE(distributionError);
    OTS_SAFE_RELEASE(m_ProductTableView);
    OTS_SAFE_RELEASE(m_MoneyTableView);
}

- (void)viewDidUnload
{
    [super viewDidUnload];
    [self releaseMyResoures];
}

-(void)dealloc
{
    [self releaseMyResoures];
    [_goodItems release];
    [_packGoodItems release];
    [_packGoodisExpand release];
    
    [super dealloc];
}

@end
